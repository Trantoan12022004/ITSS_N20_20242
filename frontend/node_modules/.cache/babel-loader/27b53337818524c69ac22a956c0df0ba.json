{"ast":null,"code":"// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\nexport default function fragments_join(state) {\n  let curr, last;\n  let level = 0;\n  const tokens = state.tokens;\n  const max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) {\n        tokens[last] = tokens[curr];\n      }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/fragments_join.mjs"],"names":["fragments_join","state","curr","last","level","tokens","max","length","nesting","type","content"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,cAAT,CAAyBC,KAAzB,EAAgC;AAC7C,MAAIC,IAAJ,EAAUC,IAAV;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,QAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACI,MAAN,CAAaE,MAAzB;;AAEA,OAAKL,IAAI,GAAGC,IAAI,GAAG,CAAnB,EAAsBD,IAAI,GAAGI,GAA7B,EAAkCJ,IAAI,EAAtC,EAA0C;AACxC;AACA;AACA,QAAIG,MAAM,CAACH,IAAD,CAAN,CAAaM,OAAb,GAAuB,CAA3B,EAA8BJ,KAAK,GAHK,CAGF;;AACtCC,IAAAA,MAAM,CAACH,IAAD,CAAN,CAAaE,KAAb,GAAqBA,KAArB;AACA,QAAIC,MAAM,CAACH,IAAD,CAAN,CAAaM,OAAb,GAAuB,CAA3B,EAA8BJ,KAAK,GALK,CAKF;;AAEtC,QAAIC,MAAM,CAACH,IAAD,CAAN,CAAaO,IAAb,KAAsB,MAAtB,IACAP,IAAI,GAAG,CAAP,GAAWI,GADX,IAEAD,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBO,IAAjB,KAA0B,MAF9B,EAEsC;AACpC;AACAJ,MAAAA,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBQ,OAAjB,GAA2BL,MAAM,CAACH,IAAD,CAAN,CAAaQ,OAAb,GAAuBL,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBQ,OAAnE;AACD,KALD,MAKO;AACL,UAAIR,IAAI,KAAKC,IAAb,EAAmB;AAAEE,QAAAA,MAAM,CAACF,IAAD,CAAN,GAAeE,MAAM,CAACH,IAAD,CAArB;AAA6B;;AAElDC,MAAAA,IAAI;AACL;AACF;;AAED,MAAID,IAAI,KAAKC,IAAb,EAAmB;AACjBE,IAAAA,MAAM,CAACE,MAAP,GAAgBJ,IAAhB;AACD;AACF","sourcesContent":["// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
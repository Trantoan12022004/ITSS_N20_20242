{"ast":null,"code":"// HTML block\nimport block_names from '../common/html_blocks.mjs';\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'; // An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\n\nconst HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\\?/, /\\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\\[CDATA\\[/, /\\]\\]>/, true], [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'), /^$/, false]];\nexport default function html_block(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  if (!state.md.options.html) {\n    return false;\n  }\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  ) {\n      return false;\n    }\n\n  let lineText = state.src.slice(pos, max);\n  let i = 0;\n\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) {\n      break;\n    }\n  }\n\n  if (i === HTML_SEQUENCES.length) {\n    return false;\n  }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  let nextLine = startLine + 1; // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) {\n        break;\n      }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) {\n          nextLine++;\n        }\n\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n  const token = state.push('html_block', '', 0);\n  token.map = [startLine, nextLine];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_block/html_block.mjs"],"names":["block_names","HTML_OPEN_CLOSE_TAG_RE","HTML_SEQUENCES","RegExp","join","source","html_block","state","startLine","endLine","silent","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","md","options","html","src","charCodeAt","lineText","slice","i","length","test","nextLine","line","token","push","map","content","getLines"],"mappings":"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","sourcesContent":["// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
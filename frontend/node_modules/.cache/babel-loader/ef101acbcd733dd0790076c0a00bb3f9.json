{"ast":null,"code":"// Commonmark default options\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n\n    /* “”‘’ */\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']\n    },\n    inline: {\n      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],\n      rules2: ['balance_pairs', 'emphasis', 'fragments_join']\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/presets/commonmark.mjs"],"names":["options","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","highlight","maxNesting","components","core","rules","block","inline","rules2"],"mappings":"AAAA;AAEA,eAAe;AACbA,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,IAAI,EAAE,IAFC;AAIP;AACAC,IAAAA,QAAQ,EAAE,IALH;AAOP;AACAC,IAAAA,MAAM,EAAE,KARD;AAUP;AACAC,IAAAA,UAAU,EAAE,WAXL;AAaP;AACAC,IAAAA,OAAO,EAAE,KAdF;AAgBP;AACAC,IAAAA,WAAW,EAAE,KAjBN;AAmBP;AACA;AACA;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,0BAxBD;;AAwB6B;AAEpC;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,SAAS,EAAE,IAhCJ;AAkCP;AACAC,IAAAA,UAAU,EAAE;AAnCL,GADI;AAuCbC,EAAAA,UAAU,EAAE;AAEVC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,CACL,WADK,EAEL,OAFK,EAGL,QAHK,EAIL,WAJK;AADH,KAFI;AAWVC,IAAAA,KAAK,EAAE;AACLD,MAAAA,KAAK,EAAE,CACL,YADK,EAEL,MAFK,EAGL,OAHK,EAIL,SAJK,EAKL,IALK,EAML,YANK,EAOL,UAPK,EAQL,MARK,EASL,WATK,EAUL,WAVK;AADF,KAXG;AA0BVE,IAAAA,MAAM,EAAE;AACNF,MAAAA,KAAK,EAAE,CACL,UADK,EAEL,WAFK,EAGL,UAHK,EAIL,QAJK,EAKL,QALK,EAML,aANK,EAOL,OAPK,EAQL,MARK,EASL,SATK,EAUL,MAVK,CADD;AAaNG,MAAAA,MAAM,EAAE,CACN,eADM,EAEN,UAFM,EAGN,gBAHM;AAbF;AA1BE;AAvCC,CAAf","sourcesContent":["// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
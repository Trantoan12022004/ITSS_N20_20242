{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trant\\\\Documents\\\\L\\u1EADp Tr\\xECnh Web\\\\CTES WEB\\\\React - Copy\\\\src\\\\containers\\\\System\\\\EventDescription.js\";\nimport React, { Component } from \"react\";\nimport MarkdownIt from \"markdown-it\";\nimport MdEditor from \"react-markdown-editor-lite\";\nimport \"react-markdown-editor-lite/lib/index.css\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { createEventDescription } from \"../../services/eventServices\";\nimport { getAllCodes } from \"../../services/userServices\";\nimport { languages } from \"../../utils/constant\";\nimport * as actions from \"../../../src/store/actions\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mdParser = new MarkdownIt();\nclass MarkdownEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.buildSelectOptions = items => {\n      return items.map(item => ({\n        value: item.keyName,\n        label: item.valueVi\n      }));\n    };\n    this.handleDoctorSelect = selectedOption => {\n      this.setState({\n        selectedDoctor: selectedOption\n      });\n    };\n    this.handleEditorChange = ({\n      html,\n      text\n    }) => {\n      this.setState({\n        contentMarkdown: text,\n        contentHTML: html\n      });\n    };\n    this.handleSaveContent = async () => {\n      console.log(\"check state\", this.state);\n      try {\n        let response = await createEventDescription({\n          contentHTML: this.state.contentHTML,\n          contentMarkdown: this.state.contentMarkdown,\n          description: this.state.description,\n          doctorId: this.state.selectedDoctor.value\n        });\n        console.log(\"check response\", response);\n        if (response && response.data.errCode === 0) {\n          toast.success(\"Save content succeed!\");\n        } else {\n          toast.error(response.errMessage);\n        }\n      } catch (e) {\n        console.log(e);\n        toast.error(\"Error saving content\");\n      }\n    };\n    this.state = {\n      contentMarkdown: \"\",\n      contentHTML: \"\",\n      description: \"\",\n      selectedPosition: null,\n      selectedEvent: null,\n      image: \"\",\n      positions: [],\n      events: []\n    };\n  }\n  async componentDidMount() {\n    try {\n      const events = await getAllCodes(\"event_type\");\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      toast.error(\"Error loading data\");\n    }\n  }\n  render() {\n    const {\n      isLoading,\n      allDoctors,\n      language\n    } = this.props;\n    console.log(\"check state\", this.state);\n    const {\n      selectedDoctor\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor mb-3 col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Select Doctor:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedDoctor,\n          onChange: this.handleDoctorSelect,\n          options: this.buildDoctorOptions(allDoctors),\n          className: \"basic-select\",\n          classNamePrefix: \"select\",\n          placeholder: language === languages.VI ? \"Chọn bác sĩ\" : \"Select doctor\",\n          isSearchable: true,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"description-input mt-3 col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"exampleFormControlTextarea1\",\n          class: \"form-label\",\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          class: \"form-control\",\n          rows: \"3\",\n          value: this.state.description,\n          onChange: e => this.setState({\n            description: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"markdown-editor\",\n        children: /*#__PURE__*/_jsxDEV(MdEditor, {\n          style: {\n            height: \"500px\"\n          },\n          renderHTML: text => mdParser.render(text),\n          onChange: this.handleEditorChange,\n          value: this.state.contentMarkdown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: this.handleSaveContent,\n        children: \"Save Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    language: state.app.language,\n    isLoggedIn: state.user.isLoggedIn,\n    allDoctors: state.admin.allDoctors\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllDoctors: () => dispatch(actions.fetchAllDoctors())\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MarkdownEditor);","map":{"version":3,"names":["React","Component","MarkdownIt","MdEditor","connect","toast","createEventDescription","getAllCodes","languages","actions","Select","jsxDEV","_jsxDEV","mdParser","MarkdownEditor","constructor","props","buildSelectOptions","items","map","item","value","keyName","label","valueVi","handleDoctorSelect","selectedOption","setState","selectedDoctor","handleEditorChange","html","text","contentMarkdown","contentHTML","handleSaveContent","console","log","state","response","description","doctorId","data","errCode","success","error","errMessage","e","selectedPosition","selectedEvent","image","positions","events","componentDidMount","render","isLoading","allDoctors","language","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","options","buildDoctorOptions","classNamePrefix","placeholder","VI","isSearchable","class","for","rows","target","style","height","renderHTML","onClick","mapStateToProps","app","isLoggedIn","user","admin","mapDispatchToProps","dispatch","fetchAllDoctors"],"sources":["C:/Users/Trant/Documents/Lập Trình Web/CTES WEB/React - Copy/src/containers/System/EventDescription.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport MarkdownIt from \"markdown-it\";\r\nimport MdEditor from \"react-markdown-editor-lite\";\r\nimport \"react-markdown-editor-lite/lib/index.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { createEventDescription } from \"../../services/eventServices\";\r\nimport { getAllCodes } from \"../../services/userServices\";\r\nimport { languages } from \"../../utils/constant\";\r\nimport * as actions from \"../../../src/store/actions\";\r\nimport Select from \"react-select\";\r\n\r\nconst mdParser = new MarkdownIt();\r\n\r\nclass MarkdownEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contentMarkdown: \"\",\r\n            contentHTML: \"\",\r\n            description: \"\",\r\n            selectedPosition: null,\r\n            selectedEvent: null,\r\n            image: \"\",\r\n            positions: [],\r\n            events: []\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const events = await getAllCodes(\"event_type\")\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error fetching data:\", error);\r\n            toast.error(\"Error loading data\");\r\n        }\r\n    }\r\n\r\n    buildSelectOptions = (items) => {\r\n        return items.map(item => ({\r\n            value: item.keyName,\r\n            label: item.valueVi\r\n        }));\r\n    };\r\n\r\n    handleDoctorSelect = (selectedOption) => {\r\n        this.setState({ selectedDoctor: selectedOption });\r\n    };\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        });\r\n    };\r\n    handleSaveContent = async () => {\r\n        console.log(\"check state\", this.state);\r\n\r\n        try {\r\n            let response = await createEventDescription({\r\n                contentHTML: this.state.contentHTML,\r\n                contentMarkdown: this.state.contentMarkdown,\r\n                description: this.state.description,\r\n                doctorId: this.state.selectedDoctor.value,\r\n            });\r\n            console.log(\"check response\", response);\r\n            if (response && response.data.errCode === 0) {\r\n                toast.success(\"Save content succeed!\");\r\n            } else {\r\n                toast.error(response.errMessage);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Error saving content\");\r\n        }\r\n    };\r\n    render() {\r\n        const { isLoading, allDoctors, language } = this.props;\r\n        console.log(\"check state\", this.state);\r\n        const { selectedDoctor } = this.state;\r\n        return (\r\n            <div className=\"markdown-editor-container\">\r\n                <div className=\"select-doctor mb-3 col-6\">\r\n                    <label className=\"form-label\">Select Doctor:</label>\r\n                    <Select\r\n                        value={selectedDoctor}\r\n                        onChange={this.handleDoctorSelect}\r\n                        options={this.buildDoctorOptions(allDoctors)}\r\n                        className=\"basic-select\"\r\n                        classNamePrefix=\"select\"\r\n                        placeholder={\r\n                            language === languages.VI\r\n                                ? \"Chọn bác sĩ\"\r\n                                : \"Select doctor\"\r\n                        }\r\n                        isSearchable={true}\r\n                        isLoading={isLoading}\r\n                    />\r\n                </div>\r\n                <div class=\"description-input mt-3 col-6\">\r\n                    <label for=\"exampleFormControlTextarea1\" class=\"form-label\">\r\n                        Description:\r\n                    </label>\r\n                    <textarea\r\n                        class=\"form-control\"\r\n                        rows=\"3\"\r\n                        value={this.state.description}\r\n                        onChange={(e) =>\r\n                            this.setState({ description: e.target.value })\r\n                        }\r\n                    ></textarea>\r\n                </div>\r\n                <div className=\"markdown-editor\">\r\n                    <MdEditor\r\n                        style={{ height: \"500px\" }}\r\n                        renderHTML={(text) => mdParser.render(text)}\r\n                        onChange={this.handleEditorChange}\r\n                        value={this.state.contentMarkdown}\r\n                    />\r\n                </div>\r\n\r\n                <button\r\n                    className=\"btn btn-primary mt-3\"\r\n                    onClick={this.handleSaveContent}\r\n                >\r\n                    Save Content\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        allDoctors: state.admin.allDoctors,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MarkdownEditor);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\nexport default function text_join(state) {\n  let curr, last;\n  const blockTokens = state.tokens;\n  const l = blockTokens.length;\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n    const tokens = blockTokens[j].children;\n    const max = tokens.length;\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) {\n          tokens[last] = tokens[curr];\n        }\n\n        last++;\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_core/text_join.mjs"],"names":["text_join","state","curr","last","blockTokens","tokens","l","length","j","type","children","max","content"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,SAAT,CAAoBC,KAApB,EAA2B;AACxC,MAAIC,IAAJ,EAAUC,IAAV;AACA,QAAMC,WAAW,GAAGH,KAAK,CAACI,MAA1B;AACA,QAAMC,CAAC,GAAGF,WAAW,CAACG,MAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1B,QAAIJ,WAAW,CAACI,CAAD,CAAX,CAAeC,IAAf,KAAwB,QAA5B,EAAsC;AAEtC,UAAMJ,MAAM,GAAGD,WAAW,CAACI,CAAD,CAAX,CAAeE,QAA9B;AACA,UAAMC,GAAG,GAAGN,MAAM,CAACE,MAAnB;;AAEA,SAAKL,IAAI,GAAG,CAAZ,EAAeA,IAAI,GAAGS,GAAtB,EAA2BT,IAAI,EAA/B,EAAmC;AACjC,UAAIG,MAAM,CAACH,IAAD,CAAN,CAAaO,IAAb,KAAsB,cAA1B,EAA0C;AACxCJ,QAAAA,MAAM,CAACH,IAAD,CAAN,CAAaO,IAAb,GAAoB,MAApB;AACD;AACF;;AAED,SAAKP,IAAI,GAAGC,IAAI,GAAG,CAAnB,EAAsBD,IAAI,GAAGS,GAA7B,EAAkCT,IAAI,EAAtC,EAA0C;AACxC,UAAIG,MAAM,CAACH,IAAD,CAAN,CAAaO,IAAb,KAAsB,MAAtB,IACAP,IAAI,GAAG,CAAP,GAAWS,GADX,IAEAN,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBO,IAAjB,KAA0B,MAF9B,EAEsC;AACpC;AACAJ,QAAAA,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBU,OAAjB,GAA2BP,MAAM,CAACH,IAAD,CAAN,CAAaU,OAAb,GAAuBP,MAAM,CAACH,IAAI,GAAG,CAAR,CAAN,CAAiBU,OAAnE;AACD,OALD,MAKO;AACL,YAAIV,IAAI,KAAKC,IAAb,EAAmB;AAAEE,UAAAA,MAAM,CAACF,IAAD,CAAN,GAAeE,MAAM,CAACH,IAAD,CAArB;AAA6B;;AAElDC,QAAAA,IAAI;AACL;AACF;;AAED,QAAID,IAAI,KAAKC,IAAb,EAAmB;AACjBE,MAAAA,MAAM,CAACE,MAAP,GAAgBJ,IAAhB;AACD;AACF;AACF","sourcesContent":["// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
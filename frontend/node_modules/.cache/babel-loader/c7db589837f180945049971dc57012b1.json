{"ast":null,"code":"// heading (#, ##, ...)\nimport { isSpace } from '../common/utils.mjs';\nexport default function heading(state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine];\n  let max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  let ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23\n  /* # */\n  || pos >= max) {\n    return false;\n  } // count heading level\n\n\n  let level = 1;\n  ch = state.src.charCodeAt(++pos);\n\n  while (ch === 0x23\n  /* # */\n  && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || pos < max && !isSpace(ch)) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  } // Let's cut tails like '    ###  ' from the end of string\n\n\n  max = state.skipSpacesBack(max, pos);\n  const tmp = state.skipCharsBack(max, 0x23, pos); // #\n\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n  const token_o = state.push('heading_open', 'h' + String(level), 1);\n  token_o.markup = '########'.slice(0, level);\n  token_o.map = [startLine, state.line];\n  const token_i = state.push('inline', '', 0);\n  token_i.content = state.src.slice(pos, max).trim();\n  token_i.map = [startLine, state.line];\n  token_i.children = [];\n  const token_c = state.push('heading_close', 'h' + String(level), -1);\n  token_c.markup = '########'.slice(0, level);\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_block/heading.mjs"],"names":["isSpace","heading","state","startLine","endLine","silent","pos","bMarks","tShift","max","eMarks","sCount","blkIndent","ch","src","charCodeAt","level","skipSpacesBack","tmp","skipCharsBack","line","token_o","push","String","markup","slice","map","token_i","content","trim","children","token_c"],"mappings":"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","sourcesContent":["// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
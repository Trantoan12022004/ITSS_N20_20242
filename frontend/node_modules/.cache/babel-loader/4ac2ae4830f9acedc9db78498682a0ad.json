{"ast":null,"code":"import actionTypes from \"./actionTypes\";\nimport { getAllCodeService } from \"../../services/userServices\";\nimport { createUser } from \"../../services/userServices\";\nimport { getAllUsers } from \"../../services/userServices\";\nimport { deleteUser } from \"../../services/userServices\";\nimport { updateUser } from \"../../services/userServices\";\nimport { ExitStatus } from \"typescript\";\nimport { toast } from \"react-toastify\";\nimport { getTopDoctorsService } from \"../../services/userServices\"; // chuc vu\n\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"POSITION\"); // console.log(\"check res position\", res);\n\n      if (res && res.data.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data.data));\n      } else {\n        dispatch(fetchPositionFailed(res.data.errMessage));\n      }\n    } catch (error) {\n      dispatch(fetchPositionFailed());\n      console.log(\"fetchPositionStart error\", error);\n    }\n  };\n};\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionFailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAILED\n}); // role\n\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_ROLE_START\n      });\n      let res = await getAllCodeService(\"ROLE\");\n\n      if (res && res.data.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data.data));\n      } else {\n        dispatch(fetchRoleFailed(res.data.errMessage));\n      }\n    } catch (error) {\n      dispatch(fetchRoleFailed());\n      console.log(\"fetchRoleStart error\", error);\n    }\n  };\n};\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRoleFailed = () => ({\n  type: actionTypes.FETCH_ROLE_FAILED\n}); // gioi tinh\n\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeService(\"GENDER\"); // console.log(\"check res gender\", res);\n\n      if (res && res.data.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data.data));\n      } else {\n        dispatch(fetchGenderFailed(res.data.errMessage));\n      }\n    } catch (error) {\n      dispatch(fetchGenderFailed());\n      console.log(\"fetchGenderStart error\", error);\n    }\n  };\n};\nexport const fetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\nexport const fetchGenderFailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAILED\n}); // tạo user mới\n\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      if (data.image) {\n        const base64Length = data.image.length - (data.image.indexOf(\",\") + 1);\n        const sizeInBytes = base64Length * 3 / 4;\n        const sizeInMB = sizeInBytes / (1024 * 1024);\n\n        if (sizeInMB > 50) {\n          toast.error(\"Kích thước ảnh không được vượt quá 16MB\");\n          return dispatch(createUserFailed());\n        }\n      }\n\n      let res = await createUser(data); // console.log(\"check res gender\", res);\n\n      if (res && res.data.errCode === 0) {\n        dispatch(createUserSuccess(res.data));\n        dispatch(fetchAllUsersStart());\n      } else {\n        dispatch(createUserFailed(res.data));\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 413) {\n        toast.error(\"Kích thước ảnh quá lớn. Vui lòng thử lại với ảnh nhỏ hơn.\");\n      } else {\n        toast.error(\"Lỗi tạo người dùng\");\n      }\n\n      dispatch(createUserFailed());\n      console.log(\"createUserFailed error\", error);\n    }\n  };\n};\nexport const createUserSuccess = success => {\n  console.log(\"Success:\", success); // Thực hiện kiểm tra ở đây\n\n  return {\n    type: actionTypes.CREATE_USER_SUCCESS,\n    success: success\n  };\n};\nexport const createUserFailed = error => {\n  console.log(\"error:\", error);\n  return {\n    type: actionTypes.CREATE_USER_FAILED,\n    error: error\n  };\n}; // hiển thị toàn bộ danh sách user\n\nexport const fetchAllUsersStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_ALL_USERS_START\n      });\n      let res = await getAllUsers(\"ALL\");\n\n      if (res && res.data.errCode === 0) {\n        dispatch(fetchAllUsersSuccess(res.data.users));\n      } else {\n        dispatch(fetchAllUsersFailed(res.data.errMessage));\n      }\n    } catch (error) {\n      dispatch(fetchAllUsersFailed());\n      console.log(\"fetchAllUsersStart error\", error);\n    }\n  };\n};\nexport const fetchAllUsersSuccess = users => ({\n  type: actionTypes.FETCH_ALL_USERS_SUCCESS,\n  users: users\n});\nexport const fetchAllUsersFailed = error => ({\n  type: actionTypes.FETCH_ALL_USERS_FAILED,\n  error: error\n}); // sửa thông tin người dùng\n\nexport const deleteUserStart = userData => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUser(userData.id);\n\n      if (res && res.data.errCode === 0) {\n        toast.success(`Xóa người dùng ${userData.lastName} ${userData.lastName} thành công`);\n        dispatch(deleteUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error(\"Xóa người dùng không thành công\");\n        dispatch(deleteUserFailed());\n      }\n    } catch (error) {\n      toast.error(\"Xóa người dùng không thành công\");\n      dispatch(deleteUserFailed());\n      console.log(\"deleteUser error\", error);\n    }\n  };\n};\nexport const deleteUserSuccess = () => ({\n  type: actionTypes.DELETE_USER_SUCCESS\n});\nexport const deleteUserFailed = () => ({\n  type: actionTypes.DELETE_USER_FAILED\n});\nexport const editUserStart = data => {\n  return async (dispatch, getState) => {\n    try {\n      console.log(\"Action received data:\", data);\n      let res = await updateUser(data);\n\n      if (res && res.data.errCode === 0) {\n        toast.success(\"Cập nhật thông tin thành công!\");\n        dispatch(editUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error(res.data.errMessage);\n        dispatch(editUserFailed());\n      }\n    } catch (error) {\n      toast.error(\"Cập nhật thông tin thất bại!\");\n      dispatch(editUserFailed());\n      console.log(\"editUserFailed error\", error);\n    }\n  };\n};\nexport const editUserSuccess = () => ({\n  type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUserFailed = () => ({\n  type: actionTypes.EDIT_USER_FAILED\n});\nexport const fetchTopDoctor = limit => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTORS_START\n      });\n      let res = await getTopDoctorsService(limit);\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\n          data: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_FAILED\n        });\n        toa;\n      }\n    } catch (error) {}\n  };\n};","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/src/store/actions/adminActions.js"],"names":["actionTypes","getAllCodeService","createUser","getAllUsers","deleteUser","updateUser","ExitStatus","toast","getTopDoctorsService","fetchPositionStart","dispatch","getState","res","data","errCode","fetchPositionSuccess","fetchPositionFailed","errMessage","error","console","log","positionData","type","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILED","fetchRoleStart","FETCH_ROLE_START","fetchRoleSuccess","fetchRoleFailed","roleData","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILED","fetchGenderStart","FETCH_GENDER_START","fetchGenderSuccess","fetchGenderFailed","genderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","createNewUser","image","base64Length","length","indexOf","sizeInBytes","sizeInMB","createUserFailed","createUserSuccess","fetchAllUsersStart","response","status","success","CREATE_USER_SUCCESS","CREATE_USER_FAILED","FETCH_ALL_USERS_START","fetchAllUsersSuccess","users","fetchAllUsersFailed","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAILED","deleteUserStart","userData","id","lastName","deleteUserSuccess","deleteUserFailed","DELETE_USER_SUCCESS","DELETE_USER_FAILED","editUserStart","editUserSuccess","editUserFailed","EDIT_USER_SUCCESS","EDIT_USER_FAILED","fetchTopDoctor","limit","FETCH_TOP_DOCTORS_START","FETCH_TOP_DOCTORS_SUCCESS","FETCH_TOP_DOCTORS_FAILED","toa"],"mappings":"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","sourcesContent":["import actionTypes from \"./actionTypes\";\r\nimport { getAllCodeService } from \"../../services/userServices\";\r\nimport { createUser } from \"../../services/userServices\";\r\nimport { getAllUsers } from \"../../services/userServices\";\r\nimport { deleteUser } from \"../../services/userServices\";\r\nimport { updateUser } from \"../../services/userServices\";\r\nimport { ExitStatus } from \"typescript\";\r\nimport { toast } from \"react-toastify\";\r\nimport { getTopDoctorsService } from \"../../services/userServices\";\r\n\r\n// chuc vu\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            // console.log(\"check res position\", res);\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchPositionFailed(res.data.errMessage));\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log(\"fetchPositionStart error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData,\r\n});\r\n\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILED,\r\n});\r\n\r\n// role\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_ROLE_START });\r\n\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchRoleFailed(res.data.errMessage));\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log(\"fetchRoleStart error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData,\r\n});\r\n\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED,\r\n});\r\n// gioi tinh\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_GENDER_START });\r\n\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            // console.log(\"check res gender\", res);\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchGenderFailed(res.data.errMessage));\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log(\"fetchGenderStart error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData,\r\n});\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED,\r\n});\r\n\r\n// tạo user mới\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            if (data.image) {\r\n                const base64Length =\r\n                    data.image.length - (data.image.indexOf(\",\") + 1);\r\n                const sizeInBytes = (base64Length * 3) / 4;\r\n                const sizeInMB = sizeInBytes / (1024 * 1024);\r\n\r\n                if (sizeInMB > 50) {\r\n                    toast.error(\"Kích thước ảnh không được vượt quá 16MB\");\r\n                    return dispatch(createUserFailed());\r\n                }\r\n            }\r\n            let res = await createUser(data);\r\n            // console.log(\"check res gender\", res);\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch(createUserSuccess(res.data));\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                dispatch(createUserFailed(res.data));\r\n            }\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 413) {\r\n                toast.error(\r\n                    \"Kích thước ảnh quá lớn. Vui lòng thử lại với ảnh nhỏ hơn.\"\r\n                );\r\n            } else {\r\n                toast.error(\"Lỗi tạo người dùng\");\r\n            }\r\n            dispatch(createUserFailed());\r\n            console.log(\"createUserFailed error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const createUserSuccess = (success) => {\r\n    console.log(\"Success:\", success); // Thực hiện kiểm tra ở đây\r\n    return {\r\n        type: actionTypes.CREATE_USER_SUCCESS,\r\n        success: success,\r\n    };\r\n};\r\n\r\nexport const createUserFailed = (error) => {\r\n    console.log(\"error:\", error);\r\n    return {\r\n        type: actionTypes.CREATE_USER_FAILED,\r\n        error: error,\r\n    };\r\n};\r\n\r\n// hiển thị toàn bộ danh sách user\r\n\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_ALL_USERS_START });\r\n\r\n            let res = await getAllUsers(\"ALL\");\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch(fetchAllUsersSuccess(res.data.users));\r\n            } else {\r\n                dispatch(fetchAllUsersFailed(res.data.errMessage));\r\n            }\r\n        } catch (error) {\r\n            dispatch(fetchAllUsersFailed());\r\n            console.log(\"fetchAllUsersStart error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchAllUsersSuccess = (users) => ({\r\n    type: actionTypes.FETCH_ALL_USERS_SUCCESS,\r\n    users: users,\r\n});\r\n\r\nexport const fetchAllUsersFailed = (error) => ({\r\n    type: actionTypes.FETCH_ALL_USERS_FAILED,\r\n    error: error,\r\n});\r\n\r\n// sửa thông tin người dùng\r\n\r\nexport const deleteUserStart = (userData) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUser(userData.id);\r\n            if (res && res.data.errCode === 0) {\r\n                toast.success(\r\n                    `Xóa người dùng ${userData.lastName} ${userData.lastName} thành công`\r\n                );\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Xóa người dùng không thành công\");\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Xóa người dùng không thành công\");\r\n            dispatch(deleteUserFailed());\r\n            console.log(\"deleteUser error\", error);\r\n        }\r\n    };\r\n};\r\nexport const deleteUserSuccess = () => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS,\r\n});\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILED,\r\n});\r\n\r\nexport const editUserStart = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            console.log(\"Action received data:\", data);\r\n            let res = await updateUser(data);\r\n            if (res && res.data.errCode === 0) {\r\n                toast.success(\"Cập nhật thông tin thành công!\");\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(res.data.errMessage);\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Cập nhật thông tin thất bại!\");\r\n            dispatch(editUserFailed());\r\n            console.log(\"editUserFailed error\", error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const editUserSuccess = () => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS,\r\n});\r\n\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILED,\r\n});\r\n\r\nexport const fetchTopDoctor = (limit) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_TOP_DOCTORS_START });\r\n            let res = await getTopDoctorsService(limit);\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    data: res.data,\r\n                });\r\n            } else {\r\n                dispatch({ type: actionTypes.FETCH_TOP_DOCTORS_FAILED });\r\n                toa\r\n            }\r\n        } catch (error) {}\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Parse link destination\n//\nimport { unescapeAll } from '../common/utils.mjs';\nexport default function parseLinkDestination(str, start, max) {\n  let code;\n  let pos = start;\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  };\n\n  if (str.charCodeAt(pos) === 0x3C\n  /* < */\n  ) {\n      pos++;\n\n      while (pos < max) {\n        code = str.charCodeAt(pos);\n\n        if (code === 0x0A\n        /* \\n */\n        ) {\n            return result;\n          }\n\n        if (code === 0x3C\n        /* < */\n        ) {\n            return result;\n          }\n\n        if (code === 0x3E\n        /* > */\n        ) {\n            result.pos = pos + 1;\n            result.str = unescapeAll(str.slice(start + 1, pos));\n            result.ok = true;\n            return result;\n          }\n\n        if (code === 0x5C\n        /* \\ */\n        && pos + 1 < max) {\n          pos += 2;\n          continue;\n        }\n\n        pos++;\n      } // no closing '>'\n\n\n      return result;\n    } // this should be ... } else { ... branch\n\n\n  let level = 0;\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) {\n      break;\n    } // ascii control characters\n\n\n    if (code < 0x20 || code === 0x7F) {\n      break;\n    }\n\n    if (code === 0x5C\n    /* \\ */\n    && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) {\n        break;\n      }\n\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28\n    /* ( */\n    ) {\n        level++;\n\n        if (level > 32) {\n          return result;\n        }\n      }\n\n    if (code === 0x29\n    /* ) */\n    ) {\n        if (level === 0) {\n          break;\n        }\n\n        level--;\n      }\n\n    pos++;\n  }\n\n  if (start === pos) {\n    return result;\n  }\n\n  if (level !== 0) {\n    return result;\n  }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.pos = pos;\n  result.ok = true;\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/helpers/parse_link_destination.mjs"],"names":["unescapeAll","parseLinkDestination","str","start","max","code","pos","result","ok","charCodeAt","slice","level"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,qBAA5B;AAEA,eAAe,SAASC,oBAAT,CAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;AAC7D,MAAIC,IAAJ;AACA,MAAIC,GAAG,GAAGH,KAAV;AAEA,QAAMI,MAAM,GAAG;AACbC,IAAAA,EAAE,EAAE,KADS;AAEbF,IAAAA,GAAG,EAAE,CAFQ;AAGbJ,IAAAA,GAAG,EAAE;AAHQ,GAAf;;AAMA,MAAIA,GAAG,CAACO,UAAJ,CAAeH,GAAf,MAAwB;AAAK;AAAjC,IAA0C;AACxCA,MAAAA,GAAG;;AACH,aAAOA,GAAG,GAAGF,GAAb,EAAkB;AAChBC,QAAAA,IAAI,GAAGH,GAAG,CAACO,UAAJ,CAAeH,GAAf,CAAP;;AACA,YAAID,IAAI,KAAK;AAAK;AAAlB,UAA4B;AAAE,mBAAOE,MAAP;AAAe;;AAC7C,YAAIF,IAAI,KAAK;AAAK;AAAlB,UAA2B;AAAE,mBAAOE,MAAP;AAAe;;AAC5C,YAAIF,IAAI,KAAK;AAAK;AAAlB,UAA2B;AACzBE,YAAAA,MAAM,CAACD,GAAP,GAAaA,GAAG,GAAG,CAAnB;AACAC,YAAAA,MAAM,CAACL,GAAP,GAAaF,WAAW,CAACE,GAAG,CAACQ,KAAJ,CAAUP,KAAK,GAAG,CAAlB,EAAqBG,GAArB,CAAD,CAAxB;AACAC,YAAAA,MAAM,CAACC,EAAP,GAAY,IAAZ;AACA,mBAAOD,MAAP;AACD;;AACD,YAAIF,IAAI,KAAK;AAAK;AAAd,WAAyBC,GAAG,GAAG,CAAN,GAAUF,GAAvC,EAA4C;AAC1CE,UAAAA,GAAG,IAAI,CAAP;AACA;AACD;;AAEDA,QAAAA,GAAG;AACJ,OAlBuC,CAoBxC;;;AACA,aAAOC,MAAP;AACD,KAhC4D,CAkC7D;;;AAEA,MAAII,KAAK,GAAG,CAAZ;;AACA,SAAOL,GAAG,GAAGF,GAAb,EAAkB;AAChBC,IAAAA,IAAI,GAAGH,GAAG,CAACO,UAAJ,CAAeH,GAAf,CAAP;;AAEA,QAAID,IAAI,KAAK,IAAb,EAAmB;AAAE;AAAO,KAHZ,CAKhB;;;AACA,QAAIA,IAAI,GAAG,IAAP,IAAeA,IAAI,KAAK,IAA5B,EAAkC;AAAE;AAAO;;AAE3C,QAAIA,IAAI,KAAK;AAAK;AAAd,OAAyBC,GAAG,GAAG,CAAN,GAAUF,GAAvC,EAA4C;AAC1C,UAAIF,GAAG,CAACO,UAAJ,CAAeH,GAAG,GAAG,CAArB,MAA4B,IAAhC,EAAsC;AAAE;AAAO;;AAC/CA,MAAAA,GAAG,IAAI,CAAP;AACA;AACD;;AAED,QAAID,IAAI,KAAK;AAAK;AAAlB,MAA2B;AACzBM,QAAAA,KAAK;;AACL,YAAIA,KAAK,GAAG,EAAZ,EAAgB;AAAE,iBAAOJ,MAAP;AAAe;AAClC;;AAED,QAAIF,IAAI,KAAK;AAAK;AAAlB,MAA2B;AACzB,YAAIM,KAAK,KAAK,CAAd,EAAiB;AAAE;AAAO;;AAC1BA,QAAAA,KAAK;AACN;;AAEDL,IAAAA,GAAG;AACJ;;AAED,MAAIH,KAAK,KAAKG,GAAd,EAAmB;AAAE,WAAOC,MAAP;AAAe;;AACpC,MAAII,KAAK,KAAK,CAAd,EAAiB;AAAE,WAAOJ,MAAP;AAAe;;AAElCA,EAAAA,MAAM,CAACL,GAAP,GAAaF,WAAW,CAACE,GAAG,CAACQ,KAAJ,CAAUP,KAAV,EAAiBG,GAAjB,CAAD,CAAxB;AACAC,EAAAA,MAAM,CAACD,GAAP,GAAaA,GAAb;AACAC,EAAAA,MAAM,CAACC,EAAP,GAAY,IAAZ;AACA,SAAOD,MAAP;AACD","sourcesContent":["// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Process [link](<to> \"stuff\")\nimport { normalizeReference, isSpace } from '../common/utils.mjs';\nexport default function link(state, silent) {\n  let code, label, res, ref;\n  let href = '';\n  let title = '';\n  let start = state.pos;\n  let parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B\n  /* [ */\n  ) {\n      return false;\n    }\n\n  const oldPos = state.pos;\n  const max = state.posMax;\n  const labelStart = state.pos + 1;\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true); // parser failed to find ']', so it's not a valid link\n\n  if (labelEnd < 0) {\n    return false;\n  }\n\n  let pos = labelEnd + 1;\n\n  if (pos < max && state.src.charCodeAt(pos) === 0x28\n  /* ( */\n  ) {\n      //\n      // Inline link\n      //\n      // might have found a valid shortcut link, disable reference parsing\n      parseReference = false; // [link](  <href>  \"title\"  )\n      //        ^^ skipping these spaces\n\n      pos++;\n\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n\n        if (!isSpace(code) && code !== 0x0A) {\n          break;\n        }\n      }\n\n      if (pos >= max) {\n        return false;\n      } // [link](  <href>  \"title\"  )\n      //          ^^^^^^ parsing link destination\n\n\n      start = pos;\n      res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n\n      if (res.ok) {\n        href = state.md.normalizeLink(res.str);\n\n        if (state.md.validateLink(href)) {\n          pos = res.pos;\n        } else {\n          href = '';\n        } // [link](  <href>  \"title\"  )\n        //                ^^ skipping these spaces\n\n\n        start = pos;\n\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n\n          if (!isSpace(code) && code !== 0x0A) {\n            break;\n          }\n        } // [link](  <href>  \"title\"  )\n        //                  ^^^^^^^ parsing link title\n\n\n        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n\n        if (pos < max && start !== pos && res.ok) {\n          title = res.str;\n          pos = res.pos; // [link](  <href>  \"title\"  )\n          //                         ^^ skipping these spaces\n\n          for (; pos < max; pos++) {\n            code = state.src.charCodeAt(pos);\n\n            if (!isSpace(code) && code !== 0x0A) {\n              break;\n            }\n          }\n        }\n      }\n\n      if (pos >= max || state.src.charCodeAt(pos) !== 0x29\n      /* ) */\n      ) {\n          // parsing a valid shortcut link failed, fallback to reference\n          parseReference = true;\n        }\n\n      pos++;\n    }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') {\n      return false;\n    }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B\n    /* [ */\n    ) {\n        start = pos + 1;\n        pos = state.md.helpers.parseLinkLabel(state, pos);\n\n        if (pos >= 0) {\n          label = state.src.slice(start, pos++);\n        } else {\n          pos = labelEnd + 1;\n        }\n      } else {\n      pos = labelEnd + 1;\n    } // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n\n\n    if (!label) {\n      label = state.src.slice(labelStart, labelEnd);\n    }\n\n    ref = state.env.references[normalizeReference(label)];\n\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n\n    href = ref.href;\n    title = ref.title;\n  } //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n\n\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n    const token_o = state.push('link_open', 'a', 1);\n    const attrs = [['href', href]];\n    token_o.attrs = attrs;\n\n    if (title) {\n      attrs.push(['title', title]);\n    }\n\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n    state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/link.mjs"],"names":["normalizeReference","isSpace","link","state","silent","code","label","res","ref","href","title","start","pos","parseReference","src","charCodeAt","oldPos","max","posMax","labelStart","labelEnd","md","helpers","parseLinkLabel","parseLinkDestination","ok","normalizeLink","str","validateLink","parseLinkTitle","env","references","slice","token_o","push","attrs","linkLevel","inline","tokenize"],"mappings":"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","sourcesContent":["// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
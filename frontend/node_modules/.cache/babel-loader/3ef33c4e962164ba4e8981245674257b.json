{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trant\\\\Documents\\\\L\\u1EADp Tr\\xECnh Web\\\\CTES WEB\\\\React - Copy\\\\src\\\\components\\\\Input\\\\InputSuggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport \"./InputSuggest.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAlphaNumericChar = keycode => {\n  return keycode >= 48 && keycode <= 57 || keycode >= 65 && keycode <= 90;\n};\nclass InputSuggestion extends React.Component {\n  constructor() {\n    super();\n    this.getSuggestions = textInput => {\n      // if (!textInput || textInput.length === 0) return []; //chưa nhập -> chưa gợi ý\n      const inputValue = textInput.trim().toLowerCase();\n      if (!this.props.inputsWithIndex) {\n        return [{\n          textInput: textInput\n        }];\n      }\n      ;\n      let inputsWithIndex = this.props.inputsWithIndex;\n      let keyArr = Object.keys(inputsWithIndex).filter(textInput => {\n        return textInput.toLowerCase().indexOf(inputValue) >= 0;\n      });\n      var suggestArr = keyArr.map(function (key) {\n        return inputsWithIndex[key];\n      });\n      return suggestArr;\n    };\n    this.storeInputReference = autosuggest => {\n      if (autosuggest !== null) {\n        this.inputSearch = autosuggest.input;\n      }\n    };\n    this.shouldRenderSuggestions = value => {\n      return true;\n    };\n    this.getSuggestionValue = suggestion => {\n      this.props.onSelected(suggestion);\n      return suggestion.displayName;\n    };\n    this.renderSuggestion = suggestion => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggest-item\",\n        children: suggestion.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this);\n    };\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.sortSuggestions(this.getSuggestions(value), value)\n      });\n    };\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n    this.onSuggestionSelected = (event, selected) => {\n      this.props.onSelected(selected.suggestion);\n      this.setState({\n        textInput: selected.suggestion && selected.suggestion.displayName\n      });\n    };\n    this.handleChangeInput = (event, {\n      newValue\n    }) => {\n      this.setState({\n        textInput: newValue || ''\n      });\n    };\n    this.state = {\n      textInput: '',\n      suggestions: []\n    };\n    document.addEventListener('keydown', this.freeTyping.bind(this), false);\n  }\n  freeTyping(e) {\n    if (!isAlphaNumericChar(e.keyCode)) {\n      return;\n    }\n    if (e.target.value === undefined) {\n      this.inputSearch.focus();\n    }\n  }\n  sortSuggestions(suggestions, value) {\n    var results = _.sortBy(suggestions, element => {\n      return element.displayName;\n    });\n    return results;\n  }\n  reset() {\n    this.setState({\n      textInput: ''\n    });\n    this.onSuggestionsFetchRequested({\n      value: ''\n    });\n  }\n  handleBlurInput() {\n    // this.setState({\n    //     textInput: ''\n    // });\n  }\n  render() {\n    const {\n      textInput,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      value: textInput,\n      className: \"custom-form-control\",\n      onChange: this.handleChangeInput,\n      onClick: () => {\n        this.reset();\n      },\n      onBlur: () => {\n        this.handleBlurInput();\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected,\n      shouldRenderSuggestions: this.shouldRenderSuggestions,\n      highlightFirstSuggestion: true,\n      inputProps: inputProps,\n      ref: this.storeInputReference\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst mapStateToProps = state => {\n  return {};\n};\nexport default connect(mapStateToProps, null)(InputSuggestion);","map":{"version":3,"names":["React","Autosuggest","connect","_","jsxDEV","_jsxDEV","isAlphaNumericChar","keycode","InputSuggestion","Component","constructor","getSuggestions","textInput","inputValue","trim","toLowerCase","props","inputsWithIndex","keyArr","Object","keys","filter","indexOf","suggestArr","map","key","storeInputReference","autosuggest","inputSearch","input","shouldRenderSuggestions","value","getSuggestionValue","suggestion","onSelected","displayName","renderSuggestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuggestionsFetchRequested","setState","suggestions","sortSuggestions","onSuggestionsClearRequested","onSuggestionSelected","event","selected","handleChangeInput","newValue","state","document","addEventListener","freeTyping","bind","e","keyCode","target","undefined","focus","results","sortBy","element","reset","handleBlurInput","render","inputProps","onChange","onClick","onBlur","highlightFirstSuggestion","ref","mapStateToProps"],"sources":["C:/Users/Trant/Documents/Lập Trình Web/CTES WEB/React - Copy/src/components/Input/InputSuggest.js"],"sourcesContent":["import React from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport \"./InputSuggest.scss\";\r\n\r\nconst isAlphaNumericChar = keycode => {\r\n    return (keycode >= 48 && keycode <= 57) || (keycode >= 65 && keycode <= 90);\r\n};\r\n\r\nclass InputSuggestion extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            textInput: '',\r\n            suggestions: []\r\n        };\r\n        document.addEventListener('keydown', this.freeTyping.bind(this), false);\r\n    }\r\n\r\n    freeTyping(e) {\r\n        if (!isAlphaNumericChar(e.keyCode)) {\r\n            return;\r\n        }\r\n        if (e.target.value === undefined) {\r\n            this.inputSearch.focus();\r\n        }\r\n    }\r\n\r\n    getSuggestions = textInput => {\r\n        // if (!textInput || textInput.length === 0) return []; //chưa nhập -> chưa gợi ý\r\n        const inputValue = textInput.trim().toLowerCase();\r\n\r\n        if (!this.props.inputsWithIndex) {\r\n            return [{ textInput: textInput }];\r\n        };\r\n        let inputsWithIndex = this.props.inputsWithIndex;\r\n        let keyArr = Object.keys(inputsWithIndex).filter(\r\n            textInput => {\r\n                return textInput.toLowerCase().indexOf(inputValue) >= 0\r\n            }\r\n        );\r\n        var suggestArr = keyArr.map(function (key) {\r\n            return inputsWithIndex[key];\r\n        });\r\n\r\n        return suggestArr;\r\n    };\r\n\r\n    storeInputReference = autosuggest => {\r\n        if (autosuggest !== null) {\r\n            this.inputSearch = autosuggest.input;\r\n        }\r\n    };\r\n\r\n    shouldRenderSuggestions = value => {\r\n        return true;\r\n    };\r\n\r\n    getSuggestionValue = suggestion => {\r\n        this.props.onSelected(suggestion);\r\n        return suggestion.displayName;\r\n    }\r\n    \r\n    renderSuggestion = suggestion => {\r\n        return (\r\n            <div className=\"suggest-item\">\r\n                {suggestion.displayName}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: this.sortSuggestions(this.getSuggestions(value), value)\r\n        });\r\n    };\r\n\r\n    sortSuggestions(suggestions, value) {\r\n        var results =  _.sortBy(suggestions, (element) => {\r\n            return element.displayName\r\n        })\r\n        return results;\r\n    }\r\n\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    onSuggestionSelected = (event, selected) => {\r\n        this.props.onSelected(selected.suggestion)\r\n        this.setState({\r\n            textInput: selected.suggestion && selected.suggestion.displayName\r\n        });\r\n    };\r\n\r\n    handleChangeInput = (event, { newValue }) => {\r\n        this.setState({\r\n            textInput: newValue || ''\r\n        });\r\n    };\r\n\r\n    reset() {\r\n        this.setState({\r\n            textInput: ''\r\n        });\r\n        this.onSuggestionsFetchRequested({ value: '' });\r\n    }\r\n\r\n    handleBlurInput() {\r\n        // this.setState({\r\n        //     textInput: ''\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { textInput, suggestions } = this.state;\r\n        const inputProps = {\r\n            value: textInput,\r\n            className: \"custom-form-control\",\r\n            onChange: this.handleChangeInput,\r\n            onClick: () => {\r\n                this.reset();\r\n            },\r\n            onBlur: () => {\r\n                this.handleBlurInput();\r\n            }\r\n        };\r\n        return (\r\n            <Autosuggest\r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={this.getSuggestionValue}\r\n                renderSuggestion={this.renderSuggestion}\r\n                onSuggestionSelected={this.onSuggestionSelected}\r\n                shouldRenderSuggestions={this.shouldRenderSuggestions}\r\n                highlightFirstSuggestion={true}\r\n                inputProps={inputProps}\r\n                ref={this.storeInputReference}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(InputSuggestion);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
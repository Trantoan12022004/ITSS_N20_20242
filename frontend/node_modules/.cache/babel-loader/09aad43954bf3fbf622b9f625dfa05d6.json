{"ast":null,"code":"'use strict';\n\nvar uc_micro = require('uc.micro');\n\nfunction reFactory(opts) {\n  const re = {};\n  opts = opts || {};\n  re.src_Any = uc_micro.Any.source;\n  re.src_Cc = uc_micro.Cc.source;\n  re.src_Z = uc_micro.Z.source;\n  re.src_P = uc_micro.P.source; // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|'); // \\p{\\Z\\Cc} (white spaces + control)\n\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|'); // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n\n  const text_separators = '[><\\uff5c]'; // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'; // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'; // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n  re.src_port = '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n  re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' + '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n  re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' + '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' + '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' + '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' + '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' + \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" + // allow `I'm_king` if no pair found\n  \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' + // google has many dots in \"google search\" links (#66, #81).\n  // github has ... in commit range links,\n  // Restrict to\n  // - english\n  // - percent-encoded\n  // - parts of file path\n  // - params separator\n  // until more examples found.\n  '\\\\.{2,}[a-zA-Z0-9%/&]|' + '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' + (opts['---'] ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n  : '\\\\-+|') + // allow `,,,` in paths\n  ',(?!' + re.src_ZCc + '|$)|' + // allow `;` if not followed by space-like char\n  ';(?!' + re.src_ZCc + '|$)|' + // allow `!!!` in paths, but not at the end\n  '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' + '\\\\?(?!' + re.src_ZCc + '|[?]|$)' + ')+' + '|\\\\/' + ')?'; // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n\n  re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n  re.src_xn = 'xn--[a-z0-9\\\\-]{1,59}'; // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root = // Allow letters & digits (http://test1)\n  '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';\n  re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';\n  re.src_host = '(?:' + // Don't need IP check, because digits are already allowed in normal domain names\n  //   src_ip4 +\n  // '|' +\n  '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain\n  /* _root */\n  + ')' + ')';\n  re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' + ')';\n  re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n  re.src_host_strict = re.src_host + re.src_host_terminator;\n  re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n  re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n  re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n  re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator; //\n  // Main rules\n  //\n  // Rude test fuzzy links by host, for quick deny\n\n  re.tpl_host_fuzzy_test = 'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n  re.tpl_email_fuzzy = '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n  re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n  // but can start with > (markdown blockquote)\n  '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n  re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n  // but can start with > (markdown blockquote)\n  '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n  return re;\n} //\n// Helpers\n//\n// Merge objects\n//\n\n\nfunction assign(obj\n/* from1, from2, from3, ... */\n) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n  return obj;\n}\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction isString(obj) {\n  return _class(obj) === '[object String]';\n}\n\nfunction isObject(obj) {\n  return _class(obj) === '[object Object]';\n}\n\nfunction isRegExp(obj) {\n  return _class(obj) === '[object RegExp]';\n}\n\nfunction isFunction(obj) {\n  return _class(obj) === '[object Function]';\n}\n\nfunction escapeRE(str) {\n  return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&');\n} //\n\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp('^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');\n      }\n\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n\n      return 0;\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'\n        // with code comments\n        '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') {\n          return 0;\n        }\n\n        if (pos >= 3 && text[pos - 3] === '/') {\n          return 0;\n        }\n\n        return tail.match(self.re.no_http)[0].length;\n      }\n\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');\n      }\n\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n\n      return 0;\n    }\n  }\n}; // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n\n/* eslint-disable-next-line max-len */\n\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'; // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\n\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    const tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n} // Schemas compiler. Build regexps.\n//\n\n\nfunction compile(self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__); // Define dynamic patterns\n\n  const tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n\n  tlds.push(re.src_xn);\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) {\n    return tpl.replace('%TLDS%', re.src_tlds);\n  }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i'); //\n  // Compile each schema\n  //\n\n  const aliases = [];\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name]; // skip disabled methods\n\n    if (val === null) {\n      return;\n    }\n\n    const compiled = {\n      validate: null,\n      link: null\n    };\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  }); //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n  }); //\n  // Fake record for guessed links\n  //\n\n  self.__compiled__[''] = {\n    validate: null,\n    normalize: createNormalizer()\n  }; //\n  // Build schema condition\n  //\n\n  const slist = Object.keys(self.__compiled__).filter(function (name) {\n    // Filter disabled & fake schemas\n    return name.length > 0 && self.__compiled__[name];\n  }).map(escapeRE).join('|'); // (?!_) cause 1.5x slowdown\n\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n  self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i'); //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\n\n\nfunction Match(self, shift) {\n  const start = self.__index__;\n  const end = self.__last_index__;\n\n  const text = self.__text_cache__.slice(start, end);\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n\n\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n\n  this.url = text;\n}\n\nfunction createMatch(self, shift) {\n  const match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\n\n\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options); // Cache last tested result. Used to skip repeating steps on next `match` call.\n\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n  this.re = {};\n  compile(this);\n}\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\n\n\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\n\n\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\n\n\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) {\n    return false;\n  }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos; // try to scan for link with schema - that's the most simple rule\n\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\n\n\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\n\n\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\n\n\nLinkifyIt.prototype.match = function match(text) {\n  const result = [];\n  let shift = 0; // Try to take previous element from cache, if .test() called before\n\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  } // Cut head if cache was used\n\n\n  let tail = shift ? text.slice(shift) : text; // Scan string until end reached\n\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\n\n\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n  if (!text.length) return null;\n  const m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n  const len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n  return createMatch(this, 0);\n};\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\n\n\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {\n    return el !== arr[idx - 1];\n  }).reverse();\n  compile(this);\n  return this;\n};\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\n\n\nLinkifyIt.prototype.normalize = function normalize(match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n  if (!match.schema) {\n    match.url = 'http://' + match.url;\n  }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\n\n\nLinkifyIt.prototype.onCompile = function onCompile() {};\n\nmodule.exports = LinkifyIt;","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/linkify-it/build/index.cjs.js"],"names":["uc_micro","require","reFactory","opts","re","src_Any","Any","source","src_Cc","Cc","src_Z","Z","src_P","P","src_ZPCc","join","src_ZCc","text_separators","src_pseudo_letter","src_ip4","src_auth","src_port","src_host_terminator","src_path","src_email_name","src_xn","src_domain_root","src_domain","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","src_host_strict","tpl_host_fuzzy_strict","src_host_port_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","assign","obj","sources","Array","prototype","slice","call","arguments","forEach","Object","keys","key","_class","toString","isString","isObject","isRegExp","isFunction","escapeRE","str","replace","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","isOptionsObj","reduce","acc","k","hasOwnProperty","defaultSchemas","validate","text","pos","self","tail","http","RegExp","test","match","length","no_http","mailto","tlds_2ch_src_re","tlds_default","split","resetScanCache","__index__","__text_cache__","createValidator","createNormalizer","normalize","compile","__opts__","tlds","__tlds__","onCompile","__tlds_replaced__","push","src_tlds","untpl","tpl","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","__compiled__","schemaError","name","val","Error","__schemas__","compiled","link","alias","slist","filter","map","schema_test","schema_search","schema_at_start","pretest","Match","shift","start","end","__last_index__","schema","__schema__","toLowerCase","index","lastIndex","raw","url","createMatch","LinkifyIt","schemas","options","add","definition","set","m","ml","me","len","next","tld_pos","at_pos","exec","testSchemaAt","search","indexOf","result","matchAtStart","list","keepOld","isArray","concat","sort","el","idx","arr","reverse","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar uc_micro = require('uc.micro');\n\nfunction reFactory (opts) {\n  const re = {};\n  opts = opts || {};\n\n  re.src_Any = uc_micro.Any.source;\n  re.src_Cc = uc_micro.Cc.source;\n  re.src_Z = uc_micro.Z.source;\n  re.src_P = uc_micro.P.source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re\n}\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n};\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\nfunction resetScanCache (self) {\n  self.__index__ = -1;\n  self.__text_cache__ = '';\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match);\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__);\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__;\n  const end = self.__last_index__;\n  const text = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text;\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1;\n  this.__last_index__ = -1; // Next scan position\n  this.__schema__ = '';\n  this.__text_cache__ = '';\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas);\n  this.__compiled__ = {};\n\n  this.__tlds__ = tlds_default;\n  this.__tlds_replaced__ = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this\n};\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this\n};\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__ = m[2];\n        this.__index__ = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = '';\n            this.__index__ = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length;\n        next = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:';\n          this.__index__ = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n};\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n};\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n};\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = [];\n  let shift = 0;\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n};\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__ = -1;\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text);\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null\n\n  this.__schema__ = m[2];\n  this.__index__ = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0)\n};\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse();\n\n  compile(this);\n  return this\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n};\n\nmodule.exports = LinkifyIt;\n"]},"metadata":{},"sourceType":"script"}
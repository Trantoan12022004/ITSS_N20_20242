{"ast":null,"code":"// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n    // autoconvert URL-like texts to links\n    linkify: false,\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019',\n\n    /* “”‘’ */\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n  components: {\n    core: {\n      rules: ['normalize', 'block', 'inline', 'text_join']\n    },\n    block: {\n      rules: ['paragraph']\n    },\n    inline: {\n      rules: ['text'],\n      rules2: ['balance_pairs', 'fragments_join']\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/presets/zero.mjs"],"names":["options","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","highlight","maxNesting","components","core","rules","block","inline","rules2"],"mappings":"AAAA;AACA;AAEA,eAAe;AACbA,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,IAAI,EAAE,KAFC;AAIP;AACAC,IAAAA,QAAQ,EAAE,KALH;AAOP;AACAC,IAAAA,MAAM,EAAE,KARD;AAUP;AACAC,IAAAA,UAAU,EAAE,WAXL;AAaP;AACAC,IAAAA,OAAO,EAAE,KAdF;AAgBP;AACAC,IAAAA,WAAW,EAAE,KAjBN;AAmBP;AACA;AACA;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,0BAxBD;;AAwB6B;AAEpC;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,SAAS,EAAE,IAhCJ;AAkCP;AACAC,IAAAA,UAAU,EAAE;AAnCL,GADI;AAuCbC,EAAAA,UAAU,EAAE;AAEVC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,CACL,WADK,EAEL,OAFK,EAGL,QAHK,EAIL,WAJK;AADH,KAFI;AAWVC,IAAAA,KAAK,EAAE;AACLD,MAAAA,KAAK,EAAE,CACL,WADK;AADF,KAXG;AAiBVE,IAAAA,MAAM,EAAE;AACNF,MAAAA,KAAK,EAAE,CACL,MADK,CADD;AAING,MAAAA,MAAM,EAAE,CACN,eADM,EAEN,gBAFM;AAJF;AAjBE;AAvCC,CAAf","sourcesContent":["// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\nimport Ruler from './ruler.mjs';\nimport StateCore from './rules_core/state_core.mjs';\nimport r_normalize from './rules_core/normalize.mjs';\nimport r_block from './rules_core/block.mjs';\nimport r_inline from './rules_core/inline.mjs';\nimport r_linkify from './rules_core/linkify.mjs';\nimport r_replacements from './rules_core/replacements.mjs';\nimport r_smartquotes from './rules_core/smartquotes.mjs';\nimport r_text_join from './rules_core/text_join.mjs';\nconst _rules = [['normalize', r_normalize], ['block', r_block], ['inline', r_inline], ['linkify', r_linkify], ['replacements', r_replacements], ['smartquotes', r_smartquotes], // `text_join` finds `text_special` tokens (for escape sequences)\n// and joins them with the rest of the text\n['text_join', r_text_join]];\n/**\n * new Core()\n **/\n\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\n\n\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('');\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = StateCore;\nexport default Core;","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/parser_core.mjs"],"names":["Ruler","StateCore","r_normalize","r_block","r_inline","r_linkify","r_replacements","r_smartquotes","r_text_join","_rules","Core","ruler","i","length","push","prototype","process","state","rules","getRules","l","State"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,MAAMC,MAAM,GAAG,CACb,CAAC,WAAD,EAAmBP,WAAnB,CADa,EAEb,CAAC,OAAD,EAAmBC,OAAnB,CAFa,EAGb,CAAC,QAAD,EAAmBC,QAAnB,CAHa,EAIb,CAAC,SAAD,EAAmBC,SAAnB,CAJa,EAKb,CAAC,cAAD,EAAmBC,cAAnB,CALa,EAMb,CAAC,aAAD,EAAmBC,aAAnB,CANa,EAOb;AACA;AACA,CAAC,WAAD,EAAmBC,WAAnB,CATa,CAAf;AAYA;AACA;AACA;;AACA,SAASE,IAAT,GAAiB;AACf;AACF;AACA;AACA;AACA;AACE,OAAKC,KAAL,GAAa,IAAIX,KAAJ,EAAb;;AAEA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,SAAKD,KAAL,CAAWG,IAAX,CAAgBL,MAAM,CAACG,CAAD,CAAN,CAAU,CAAV,CAAhB,EAA8BH,MAAM,CAACG,CAAD,CAAN,CAAU,CAAV,CAA9B;AACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACK,SAAL,CAAeC,OAAf,GAAyB,UAAUC,KAAV,EAAiB;AACxC,QAAMC,KAAK,GAAG,KAAKP,KAAL,CAAWQ,QAAX,CAAoB,EAApB,CAAd;;AAEA,OAAK,IAAIP,CAAC,GAAG,CAAR,EAAWQ,CAAC,GAAGF,KAAK,CAACL,MAA1B,EAAkCD,CAAC,GAAGQ,CAAtC,EAAyCR,CAAC,EAA1C,EAA8C;AAC5CM,IAAAA,KAAK,CAACN,CAAD,CAAL,CAASK,KAAT;AACD;AACF,CAND;;AAQAP,IAAI,CAACK,SAAL,CAAeM,KAAf,GAAuBpB,SAAvB;AAEA,eAAeS,IAAf","sourcesContent":["/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n"]},"metadata":{},"sourceType":"module"}
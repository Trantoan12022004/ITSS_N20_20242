{"ast":null,"code":"// Process links like https://example.org/\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\nexport default function linkify(state, silent) {\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n  const pos = state.pos;\n  const max = state.posMax;\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A\n  /* : */\n  ) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F\n  /* / */\n  ) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F\n  /* / */\n  ) return false;\n  const match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n  const proto = match[1];\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n  let url = link.url; // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n\n  if (url.length <= proto.length) return false; // disallow '*' at the end of the link (conflicts with emphasis)\n\n  url = url.replace(/\\*+$/, '');\n  const fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n    const token_o = state.push('link_open', 'a', 1);\n    token_o.attrs = [['href', fullUrl]];\n    token_o.markup = 'linkify';\n    token_o.info = 'auto';\n    const token_t = state.push('text', '', 0);\n    token_t.content = state.md.normalizeLinkText(url);\n    const token_c = state.push('link_close', 'a', -1);\n    token_c.markup = 'linkify';\n    token_c.info = 'auto';\n  }\n\n  state.pos += url.length - proto.length;\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/linkify.mjs"],"names":["SCHEME_RE","linkify","state","silent","md","options","linkLevel","pos","max","posMax","src","charCodeAt","match","pending","proto","link","matchAtStart","slice","length","url","replace","fullUrl","normalizeLink","validateLink","token_o","push","attrs","markup","info","token_t","content","normalizeLinkText","token_c"],"mappings":"AAAA;AAEA;AACA,MAAMA,SAAS,GAAG,yCAAlB;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAC9C,MAAI,CAACD,KAAK,CAACE,EAAN,CAASC,OAAT,CAAiBJ,OAAtB,EAA+B,OAAO,KAAP;AAC/B,MAAIC,KAAK,CAACI,SAAN,GAAkB,CAAtB,EAAyB,OAAO,KAAP;AAEzB,QAAMC,GAAG,GAAGL,KAAK,CAACK,GAAlB;AACA,QAAMC,GAAG,GAAGN,KAAK,CAACO,MAAlB;AAEA,MAAIF,GAAG,GAAG,CAAN,GAAUC,GAAd,EAAmB,OAAO,KAAP;AACnB,MAAIN,KAAK,CAACQ,GAAN,CAAUC,UAAV,CAAqBJ,GAArB,MAA8B;AAAI;AAAtC,IAA+C,OAAO,KAAP;AAC/C,MAAIL,KAAK,CAACQ,GAAN,CAAUC,UAAV,CAAqBJ,GAAG,GAAG,CAA3B,MAAkC;AAAI;AAA1C,IAAmD,OAAO,KAAP;AACnD,MAAIL,KAAK,CAACQ,GAAN,CAAUC,UAAV,CAAqBJ,GAAG,GAAG,CAA3B,MAAkC;AAAI;AAA1C,IAAmD,OAAO,KAAP;AAEnD,QAAMK,KAAK,GAAGV,KAAK,CAACW,OAAN,CAAcD,KAAd,CAAoBZ,SAApB,CAAd;AACA,MAAI,CAACY,KAAL,EAAY,OAAO,KAAP;AAEZ,QAAME,KAAK,GAAGF,KAAK,CAAC,CAAD,CAAnB;AAEA,QAAMG,IAAI,GAAGb,KAAK,CAACE,EAAN,CAASH,OAAT,CAAiBe,YAAjB,CAA8Bd,KAAK,CAACQ,GAAN,CAAUO,KAAV,CAAgBV,GAAG,GAAGO,KAAK,CAACI,MAA5B,CAA9B,CAAb;AACA,MAAI,CAACH,IAAL,EAAW,OAAO,KAAP;AAEX,MAAII,GAAG,GAAGJ,IAAI,CAACI,GAAf,CApB8C,CAsB9C;AACA;;AACA,MAAIA,GAAG,CAACD,MAAJ,IAAcJ,KAAK,CAACI,MAAxB,EAAgC,OAAO,KAAP,CAxBc,CA0B9C;;AACAC,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAN;AAEA,QAAMC,OAAO,GAAGnB,KAAK,CAACE,EAAN,CAASkB,aAAT,CAAuBH,GAAvB,CAAhB;AACA,MAAI,CAACjB,KAAK,CAACE,EAAN,CAASmB,YAAT,CAAsBF,OAAtB,CAAL,EAAqC,OAAO,KAAP;;AAErC,MAAI,CAAClB,MAAL,EAAa;AACXD,IAAAA,KAAK,CAACW,OAAN,GAAgBX,KAAK,CAACW,OAAN,CAAcI,KAAd,CAAoB,CAApB,EAAuB,CAACH,KAAK,CAACI,MAA9B,CAAhB;AAEA,UAAMM,OAAO,GAAGtB,KAAK,CAACuB,IAAN,CAAW,WAAX,EAAwB,GAAxB,EAA6B,CAA7B,CAAhB;AACAD,IAAAA,OAAO,CAACE,KAAR,GAAgB,CAAC,CAAC,MAAD,EAASL,OAAT,CAAD,CAAhB;AACAG,IAAAA,OAAO,CAACG,MAAR,GAAiB,SAAjB;AACAH,IAAAA,OAAO,CAACI,IAAR,GAAe,MAAf;AAEA,UAAMC,OAAO,GAAG3B,KAAK,CAACuB,IAAN,CAAW,MAAX,EAAmB,EAAnB,EAAuB,CAAvB,CAAhB;AACAI,IAAAA,OAAO,CAACC,OAAR,GAAkB5B,KAAK,CAACE,EAAN,CAAS2B,iBAAT,CAA2BZ,GAA3B,CAAlB;AAEA,UAAMa,OAAO,GAAG9B,KAAK,CAACuB,IAAN,CAAW,YAAX,EAAyB,GAAzB,EAA8B,CAAC,CAA/B,CAAhB;AACAO,IAAAA,OAAO,CAACL,MAAR,GAAiB,SAAjB;AACAK,IAAAA,OAAO,CAACJ,IAAR,GAAe,MAAf;AACD;;AAED1B,EAAAA,KAAK,CAACK,GAAN,IAAaY,GAAG,CAACD,MAAJ,GAAaJ,KAAK,CAACI,MAAhC;AACA,SAAO,IAAP;AACD","sourcesContent":["// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
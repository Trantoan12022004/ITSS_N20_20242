{"ast":null,"code":"// Process *this* and _that_\n//\n'use strict';\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i,\n    scanned,\n    token,\n    start = state.pos,\n    marker = state.src.charCodeAt(start);\n  if (silent) {\n    return false;\n  }\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) {\n    return false;\n  }\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n  for (i = 0; i < scanned.length; i++) {\n    token = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump: i,\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    });\n  }\n  state.pos += scanned.length;\n  return true;\n};\nfunction postProcess(state, delimiters) {\n  var i,\n    startDelim,\n    endDelim,\n    token,\n    ch,\n    isStrong,\n    max = delimiters.length;\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n    if (startDelim.marker !== 0x5F /* _ */ && startDelim.marker !== 0x2A /* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1 && delimiters[i - 1].marker === startDelim.marker;\n    ch = String.fromCharCode(startDelim.marker);\n    token = state.tokens[startDelim.token];\n    token.type = isStrong ? 'strong_open' : 'em_open';\n    token.tag = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup = isStrong ? ch + ch : ch;\n    token.content = '';\n    token = state.tokens[endDelim.token];\n    token.type = isStrong ? 'strong_close' : 'em_close';\n    token.tag = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup = isStrong ? ch + ch : ch;\n    token.content = '';\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n    tokens_meta = state.tokens_meta,\n    max = state.tokens_meta.length;\n  postProcess(state, state.delimiters);\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};","map":{"version":3,"names":["module","exports","tokenize","emphasis","state","silent","i","scanned","token","start","pos","marker","src","charCodeAt","scanDelims","length","push","content","String","fromCharCode","delimiters","jump","tokens","end","open","can_open","close","can_close","postProcess","startDelim","endDelim","ch","isStrong","max","type","tag","nesting","markup","curr","tokens_meta"],"sources":["C:/Users/Trant/Documents/Lập Trình Web/CTES WEB/React - Copy/node_modules/markdown-it/lib/rules_inline/emphasis.js"],"sourcesContent":["// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}
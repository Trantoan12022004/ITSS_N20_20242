{"ast":null,"code":"// Process html tags\nimport { HTML_TAG_RE } from '../common/html_re.mjs';\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\n\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\nfunction isLetter(ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20; // to lower case\n\n  return lc >= 0x61\n  /* a */\n  && lc <= 0x7a\n  /* z */\n  ;\n}\n\nexport default function html_inline(state, silent) {\n  if (!state.md.options.html) {\n    return false;\n  } // Check start\n\n\n  const max = state.posMax;\n  const pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  || pos + 2 >= max) {\n    return false;\n  } // Quick fail on second char\n\n\n  const ch = state.src.charCodeAt(pos + 1);\n\n  if (ch !== 0x21\n  /* ! */\n  && ch !== 0x3F\n  /* ? */\n  && ch !== 0x2F\n  /* / */\n  && !isLetter(ch)) {\n    return false;\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE);\n\n  if (!match) {\n    return false;\n  }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0);\n    token.content = match[0];\n    if (isLinkOpen(token.content)) state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n\n  state.pos += match[0].length;\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/html_inline.mjs"],"names":["HTML_TAG_RE","isLinkOpen","str","test","isLinkClose","isLetter","ch","lc","html_inline","state","silent","md","options","html","max","posMax","pos","src","charCodeAt","match","slice","token","push","content","linkLevel","length"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,uBAA5B;;AAEA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAO,YAAYC,IAAZ,CAAiBD,GAAjB,CAAP;AACD;;AACD,SAASE,WAAT,CAAsBF,GAAtB,EAA2B;AACzB,SAAO,aAAaC,IAAb,CAAkBD,GAAlB,CAAP;AACD;;AAED,SAASG,QAAT,CAAmBC,EAAnB,EAAuB;AACrB;AACA,QAAMC,EAAE,GAAGD,EAAE,GAAG,IAAhB,CAFqB,CAEA;;AACrB,SAAQC,EAAE,IAAI;AAAI;AAAX,KAAwBA,EAAE,IAAI;AAAI;AAAzC;AACD;;AAED,eAAe,SAASC,WAAT,CAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AAClD,MAAI,CAACD,KAAK,CAACE,EAAN,CAASC,OAAT,CAAiBC,IAAtB,EAA4B;AAAE,WAAO,KAAP;AAAc,GADM,CAGlD;;;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACM,MAAlB;AACA,QAAMC,GAAG,GAAGP,KAAK,CAACO,GAAlB;;AACA,MAAIP,KAAK,CAACQ,GAAN,CAAUC,UAAV,CAAqBF,GAArB,MAA8B;AAAI;AAAlC,KACAA,GAAG,GAAG,CAAN,IAAWF,GADf,EACoB;AAClB,WAAO,KAAP;AACD,GATiD,CAWlD;;;AACA,QAAMR,EAAE,GAAGG,KAAK,CAACQ,GAAN,CAAUC,UAAV,CAAqBF,GAAG,GAAG,CAA3B,CAAX;;AACA,MAAIV,EAAE,KAAK;AAAI;AAAX,KACAA,EAAE,KAAK;AAAI;AADX,KAEAA,EAAE,KAAK;AAAI;AAFX,KAGA,CAACD,QAAQ,CAACC,EAAD,CAHb,EAGmB;AACjB,WAAO,KAAP;AACD;;AAED,QAAMa,KAAK,GAAGV,KAAK,CAACQ,GAAN,CAAUG,KAAV,CAAgBJ,GAAhB,EAAqBG,KAArB,CAA2BnB,WAA3B,CAAd;;AACA,MAAI,CAACmB,KAAL,EAAY;AAAE,WAAO,KAAP;AAAc;;AAE5B,MAAI,CAACT,MAAL,EAAa;AACX,UAAMW,KAAK,GAAGZ,KAAK,CAACa,IAAN,CAAW,aAAX,EAA0B,EAA1B,EAA8B,CAA9B,CAAd;AACAD,IAAAA,KAAK,CAACE,OAAN,GAAgBJ,KAAK,CAAC,CAAD,CAArB;AAEA,QAAIlB,UAAU,CAACoB,KAAK,CAACE,OAAP,CAAd,EAAgCd,KAAK,CAACe,SAAN;AAChC,QAAIpB,WAAW,CAACiB,KAAK,CAACE,OAAP,CAAf,EAAgCd,KAAK,CAACe,SAAN;AACjC;;AACDf,EAAAA,KAAK,CAACO,GAAN,IAAaG,KAAK,CAAC,CAAD,CAAL,CAASM,MAAtB;AACA,SAAO,IAAP;AACD","sourcesContent":["// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
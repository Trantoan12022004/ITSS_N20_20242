{"ast":null,"code":"// Parse link title\n//\nimport { unescapeAll } from '../common/utils.mjs'; // Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\n\nexport default function parseLinkTitle(str, start, max, prev_state) {\n  let code;\n  let pos = start;\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  };\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str;\n    state.marker = prev_state.marker;\n  } else {\n    if (pos >= max) {\n      return state;\n    }\n\n    let marker = str.charCodeAt(pos);\n\n    if (marker !== 0x22\n    /* \" */\n    && marker !== 0x27\n    /* ' */\n    && marker !== 0x28\n    /* ( */\n    ) {\n        return state;\n      }\n\n    start++;\n    pos++; // if opening marker is \"(\", switch it to closing marker \")\"\n\n    if (marker === 0x28) {\n      marker = 0x29;\n    }\n\n    state.marker = marker;\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === state.marker) {\n      state.pos = pos + 1;\n      state.str += unescapeAll(str.slice(start, pos));\n      state.ok = true;\n      return state;\n    } else if (code === 0x28\n    /* ( */\n    && state.marker === 0x29\n    /* ) */\n    ) {\n        return state;\n      } else if (code === 0x5C\n    /* \\ */\n    && pos + 1 < max) {\n      pos++;\n    }\n\n    pos++;\n  } // no closing marker found, but this link title may continue on the next line (for references)\n\n\n  state.can_continue = true;\n  state.str += unescapeAll(str.slice(start, pos));\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/helpers/parse_link_title.mjs"],"names":["unescapeAll","parseLinkTitle","str","start","max","prev_state","code","pos","state","ok","can_continue","marker","charCodeAt","slice"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,qBAA5B,C,CAEA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,GAArC,EAA0CC,UAA1C,EAAsD;AACnE,MAAIC,IAAJ;AACA,MAAIC,GAAG,GAAGJ,KAAV;AAEA,QAAMK,KAAK,GAAG;AACZ;AACAC,IAAAA,EAAE,EAAE,KAFQ;AAGZ;AACAC,IAAAA,YAAY,EAAE,KAJF;AAKZ;AACAH,IAAAA,GAAG,EAAE,CANO;AAOZ;AACAL,IAAAA,GAAG,EAAE,EARO;AASZ;AACAS,IAAAA,MAAM,EAAE;AAVI,GAAd;;AAaA,MAAIN,UAAJ,EAAgB;AACd;AACA;AACAG,IAAAA,KAAK,CAACN,GAAN,GAAYG,UAAU,CAACH,GAAvB;AACAM,IAAAA,KAAK,CAACG,MAAN,GAAeN,UAAU,CAACM,MAA1B;AACD,GALD,MAKO;AACL,QAAIJ,GAAG,IAAIH,GAAX,EAAgB;AAAE,aAAOI,KAAP;AAAc;;AAEhC,QAAIG,MAAM,GAAGT,GAAG,CAACU,UAAJ,CAAeL,GAAf,CAAb;;AACA,QAAII,MAAM,KAAK;AAAK;AAAhB,OAA2BA,MAAM,KAAK;AAAK;AAA3C,OAAsDA,MAAM,KAAK;AAAK;AAA1E,MAAmF;AAAE,eAAOH,KAAP;AAAc;;AAEnGL,IAAAA,KAAK;AACLI,IAAAA,GAAG,GAPE,CASL;;AACA,QAAII,MAAM,KAAK,IAAf,EAAqB;AAAEA,MAAAA,MAAM,GAAG,IAAT;AAAe;;AAEtCH,IAAAA,KAAK,CAACG,MAAN,GAAeA,MAAf;AACD;;AAED,SAAOJ,GAAG,GAAGH,GAAb,EAAkB;AAChBE,IAAAA,IAAI,GAAGJ,GAAG,CAACU,UAAJ,CAAeL,GAAf,CAAP;;AACA,QAAID,IAAI,KAAKE,KAAK,CAACG,MAAnB,EAA2B;AACzBH,MAAAA,KAAK,CAACD,GAAN,GAAYA,GAAG,GAAG,CAAlB;AACAC,MAAAA,KAAK,CAACN,GAAN,IAAaF,WAAW,CAACE,GAAG,CAACW,KAAJ,CAAUV,KAAV,EAAiBI,GAAjB,CAAD,CAAxB;AACAC,MAAAA,KAAK,CAACC,EAAN,GAAW,IAAX;AACA,aAAOD,KAAP;AACD,KALD,MAKO,IAAIF,IAAI,KAAK;AAAK;AAAd,OAAyBE,KAAK,CAACG,MAAN,KAAiB;AAAK;AAAnD,MAA4D;AACjE,eAAOH,KAAP;AACD,OAFM,MAEA,IAAIF,IAAI,KAAK;AAAK;AAAd,OAAyBC,GAAG,GAAG,CAAN,GAAUH,GAAvC,EAA4C;AACjDG,MAAAA,GAAG;AACJ;;AAEDA,IAAAA,GAAG;AACJ,GAnDkE,CAqDnE;;;AACAC,EAAAA,KAAK,CAACE,YAAN,GAAqB,IAArB;AACAF,EAAAA,KAAK,CAACN,GAAN,IAAaF,WAAW,CAACE,GAAG,CAACW,KAAJ,CAAUV,KAAV,EAAiBI,GAAjB,CAAD,CAAxB;AACA,SAAOC,KAAP;AACD","sourcesContent":["// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nexport default function parseLinkTitle (str, start, max, prev_state) {\n  let code\n  let pos = start\n\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  }\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str\n    state.marker = prev_state.marker\n  } else {\n    if (pos >= max) { return state }\n\n    let marker = str.charCodeAt(pos)\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }\n\n    start++\n    pos++\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) { marker = 0x29 }\n\n    state.marker = marker\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === state.marker) {\n      state.pos = pos + 1\n      state.str += unescapeAll(str.slice(start, pos))\n      state.ok = true\n      return state\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n    }\n\n    pos++\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true\n  state.str += unescapeAll(str.slice(start, pos))\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}
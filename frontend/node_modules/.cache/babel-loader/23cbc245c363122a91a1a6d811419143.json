{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;\nexports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nvar xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]); // For compatibility with node < 4, we wrap `codePointAt`\n\nexports.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? function (str, index) {\n  return str.codePointAt(index);\n} : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\nfunction (c, index) {\n  return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n};\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\n\nfunction encodeXML(str) {\n  var ret = \"\";\n  var lastIdx = 0;\n  var match;\n\n  while ((match = exports.xmlReplacer.exec(str)) !== null) {\n    var i = match.index;\n    var char = str.charCodeAt(i);\n    var next = xmlCodeMap.get(char);\n\n    if (next !== undefined) {\n      ret += str.substring(lastIdx, i) + next;\n      lastIdx = i + 1;\n    } else {\n      ret += \"\".concat(str.substring(lastIdx, i), \"&#x\").concat((0, exports.getCodePoint)(str, i).toString(16), \";\"); // Increase by 1 if we have a surrogate pair\n\n      lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n    }\n  }\n\n  return ret + str.substr(lastIdx);\n}\n\nexports.encodeXML = encodeXML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\n\nexports.escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\n\nfunction getEscaper(regex, map) {\n  return function escape(data) {\n    var match;\n    var lastIdx = 0;\n    var result = \"\";\n\n    while (match = regex.exec(data)) {\n      if (lastIdx !== match.index) {\n        result += data.substring(lastIdx, match.index);\n      } // We know that this character will be in the map.\n\n\n      result += map.get(match[0].charCodeAt(0)); // Every match will be of length 1\n\n      lastIdx = match.index + 1;\n    }\n\n    return result + data.substring(lastIdx);\n  };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\n\n\nexports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\n\nexports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\n\nexports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));","map":{"version":3,"sources":["escape.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;\nexports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nvar xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexports.getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? function (str, index) { return str.codePointAt(index); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c, index) {\n            return (c.charCodeAt(index) & 0xfc00) === 0xd800\n                ? (c.charCodeAt(index) - 0xd800) * 0x400 +\n                    c.charCodeAt(index + 1) -\n                    0xdc00 +\n                    0x10000\n                : c.charCodeAt(index);\n        };\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nfunction encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = exports.xmlReplacer.exec(str)) !== null) {\n        var i = match.index;\n        var char = str.charCodeAt(i);\n        var next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        }\n        else {\n            ret += \"\".concat(str.substring(lastIdx, i), \"&#x\").concat((0, exports.getCodePoint)(str, i).toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\nexports.encodeXML = encodeXML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexports.escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        var match;\n        var lastIdx = 0;\n        var result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map"]},"metadata":{},"sourceType":"script"}
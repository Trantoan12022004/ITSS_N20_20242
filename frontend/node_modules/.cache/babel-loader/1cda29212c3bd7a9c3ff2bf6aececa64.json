{"ast":null,"code":"// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A\n    /* \\n */\n    :\n    case 0x21\n    /* ! */\n    :\n    case 0x23\n    /* # */\n    :\n    case 0x24\n    /* $ */\n    :\n    case 0x25\n    /* % */\n    :\n    case 0x26\n    /* & */\n    :\n    case 0x2A\n    /* * */\n    :\n    case 0x2B\n    /* + */\n    :\n    case 0x2D\n    /* - */\n    :\n    case 0x3A\n    /* : */\n    :\n    case 0x3C\n    /* < */\n    :\n    case 0x3D\n    /* = */\n    :\n    case 0x3E\n    /* > */\n    :\n    case 0x40\n    /* @ */\n    :\n    case 0x5B\n    /* [ */\n    :\n    case 0x5C\n    /* \\ */\n    :\n    case 0x5D\n    /* ] */\n    :\n    case 0x5E\n    /* ^ */\n    :\n    case 0x5F\n    /* _ */\n    :\n    case 0x60\n    /* ` */\n    :\n    case 0x7B\n    /* { */\n    :\n    case 0x7D\n    /* } */\n    :\n    case 0x7E\n    /* ~ */\n    :\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport default function text(state, silent) {\n  let pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) {\n    return false;\n  }\n\n  if (!silent) {\n    state.pending += state.src.slice(state.pos, pos);\n  }\n\n  state.pos = pos;\n  return true;\n} // Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/text.mjs"],"names":["isTerminatorChar","ch","text","state","silent","pos","posMax","src","charCodeAt","pending","slice"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA,SAASA,gBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,UAAQA,EAAR;AACE,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACA,SAAK;AAAI;AAAT;AACE,aAAO,IAAP;;AACF;AACE,aAAO,KAAP;AA1BJ;AA4BD;;AAED,eAAe,SAASC,IAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC3C,MAAIC,GAAG,GAAGF,KAAK,CAACE,GAAhB;;AAEA,SAAOA,GAAG,GAAGF,KAAK,CAACG,MAAZ,IAAsB,CAACN,gBAAgB,CAACG,KAAK,CAACI,GAAN,CAAUC,UAAV,CAAqBH,GAArB,CAAD,CAA9C,EAA2E;AACzEA,IAAAA,GAAG;AACJ;;AAED,MAAIA,GAAG,KAAKF,KAAK,CAACE,GAAlB,EAAuB;AAAE,WAAO,KAAP;AAAc;;AAEvC,MAAI,CAACD,MAAL,EAAa;AAAED,IAAAA,KAAK,CAACM,OAAN,IAAiBN,KAAK,CAACI,GAAN,CAAUG,KAAV,CAAgBP,KAAK,CAACE,GAAtB,EAA2BA,GAA3B,CAAjB;AAAkD;;AAEjEF,EAAAA,KAAK,CAACE,GAAN,GAAYA,GAAZ;AAEA,SAAO,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n"]},"metadata":{},"sourceType":"module"}
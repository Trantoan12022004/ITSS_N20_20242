{"ast":null,"code":"/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs';\nconst default_rules = {};\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';\n};\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\\n';\n};\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx];\n  const info = token.info ? unescapeAll(token.info).trim() : '';\n  let langName = '';\n  let langAttrs = '';\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  let highlighted;\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  } // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n\n\n  if (info) {\n    const i = token.attrIndex('class');\n    const tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    } // Fake token just to render attributes\n\n\n    const tmpToken = {\n      attrs: tmpAttrs\n    };\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`;\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`;\n};\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]; // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);\n  return slf.renderToken(tokens, idx, options);\n};\n\ndefault_rules.hardbreak = function (tokens, idx, options\n/*, env */\n) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\n\ndefault_rules.softbreak = function (tokens, idx, options\n/*, env */\n) {\n  return options.breaks ? options.xhtmlOut ? '<br />\\n' : '<br>\\n' : '\\n';\n};\n\ndefault_rules.text = function (tokens, idx\n/*, options, env */\n) {\n  return escapeHtml(tokens[idx].content);\n};\n\ndefault_rules.html_block = function (tokens, idx\n/*, options, env */\n) {\n  return tokens[idx].content;\n};\n\ndefault_rules.html_inline = function (tokens, idx\n/*, options, env */\n) {\n  return tokens[idx].content;\n};\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\n\n\nfunction Renderer() {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\n\n\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  let i, l, result;\n\n  if (!token.attrs) {\n    return '';\n  }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\n\n\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  const token = tokens[idx];\n  let result = ''; // Tight list paragraphs\n\n  if (token.hidden) {\n    return '';\n  } // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n\n\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  } // Add token name, e.g. `<img`\n\n\n  result += (token.nesting === -1 ? '</' : '<') + token.tag; // Encode attributes, e.g. `<img src=\"foo\"`\n\n  result += this.renderAttrs(token); // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  } // Check if we need to add a newline after this tag\n\n\n  let needLf = false;\n\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n  return result;\n};\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\n\n\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\n\n\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = '';\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content;\n        break;\n\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env);\n        break;\n\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content;\n        break;\n\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n';\n        break;\n\n      default: // all other tokens are skipped\n\n    }\n  }\n\n  return result;\n};\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\n\n\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = '';\n  const rules = this.rules;\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nexport default Renderer;","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/renderer.mjs"],"names":["assign","unescapeAll","escapeHtml","default_rules","code_inline","tokens","idx","options","env","slf","token","renderAttrs","content","code_block","fence","info","trim","langName","langAttrs","arr","split","slice","join","highlighted","highlight","indexOf","i","attrIndex","tmpAttrs","attrs","push","langPrefix","tmpToken","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","Renderer","rules","prototype","l","result","length","hidden","block","nesting","tag","needLf","nextToken","type","renderInline","len","render"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,QAAgD,oBAAhD;AAEA,MAAMC,aAAa,GAAG,EAAtB;;AAEAA,aAAa,CAACC,WAAd,GAA4B,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;AACpE,QAAMC,KAAK,GAAGL,MAAM,CAACC,GAAD,CAApB;AAEA,SAAQ,UAAUG,GAAG,CAACE,WAAJ,CAAgBD,KAAhB,CAAV,GAAmC,GAAnC,GACAR,UAAU,CAACQ,KAAK,CAACE,OAAP,CADV,GAEA,SAFR;AAGD,CAND;;AAQAT,aAAa,CAACU,UAAd,GAA2B,UAAUR,MAAV,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;AACnE,QAAMC,KAAK,GAAGL,MAAM,CAACC,GAAD,CAApB;AAEA,SAAQ,SAASG,GAAG,CAACE,WAAJ,CAAgBD,KAAhB,CAAT,GAAkC,SAAlC,GACAR,UAAU,CAACG,MAAM,CAACC,GAAD,CAAN,CAAYM,OAAb,CADV,GAEA,iBAFR;AAGD,CAND;;AAQAT,aAAa,CAACW,KAAd,GAAsB,UAAUT,MAAV,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;AAC9D,QAAMC,KAAK,GAAGL,MAAM,CAACC,GAAD,CAApB;AACA,QAAMS,IAAI,GAAGL,KAAK,CAACK,IAAN,GAAad,WAAW,CAACS,KAAK,CAACK,IAAP,CAAX,CAAwBC,IAAxB,EAAb,GAA8C,EAA3D;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAIH,IAAJ,EAAU;AACR,UAAMI,GAAG,GAAGJ,IAAI,CAACK,KAAL,CAAW,QAAX,CAAZ;AACAH,IAAAA,QAAQ,GAAGE,GAAG,CAAC,CAAD,CAAd;AACAD,IAAAA,SAAS,GAAGC,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,EAAlB,CAAZ;AACD;;AAED,MAAIC,WAAJ;;AACA,MAAIhB,OAAO,CAACiB,SAAZ,EAAuB;AACrBD,IAAAA,WAAW,GAAGhB,OAAO,CAACiB,SAAR,CAAkBd,KAAK,CAACE,OAAxB,EAAiCK,QAAjC,EAA2CC,SAA3C,KAAyDhB,UAAU,CAACQ,KAAK,CAACE,OAAP,CAAjF;AACD,GAFD,MAEO;AACLW,IAAAA,WAAW,GAAGrB,UAAU,CAACQ,KAAK,CAACE,OAAP,CAAxB;AACD;;AAED,MAAIW,WAAW,CAACE,OAAZ,CAAoB,MAApB,MAAgC,CAApC,EAAuC;AACrC,WAAOF,WAAW,GAAG,IAArB;AACD,GArB6D,CAuB9D;AACA;AACA;;;AACA,MAAIR,IAAJ,EAAU;AACR,UAAMW,CAAC,GAAGhB,KAAK,CAACiB,SAAN,CAAgB,OAAhB,CAAV;AACA,UAAMC,QAAQ,GAAGlB,KAAK,CAACmB,KAAN,GAAcnB,KAAK,CAACmB,KAAN,CAAYR,KAAZ,EAAd,GAAoC,EAArD;;AAEA,QAAIK,CAAC,GAAG,CAAR,EAAW;AACTE,MAAAA,QAAQ,CAACE,IAAT,CAAc,CAAC,OAAD,EAAUvB,OAAO,CAACwB,UAAR,GAAqBd,QAA/B,CAAd;AACD,KAFD,MAEO;AACLW,MAAAA,QAAQ,CAACF,CAAD,CAAR,GAAcE,QAAQ,CAACF,CAAD,CAAR,CAAYL,KAAZ,EAAd;AACAO,MAAAA,QAAQ,CAACF,CAAD,CAAR,CAAY,CAAZ,KAAkB,MAAMnB,OAAO,CAACwB,UAAd,GAA2Bd,QAA7C;AACD,KATO,CAWR;;;AACA,UAAMe,QAAQ,GAAG;AACfH,MAAAA,KAAK,EAAED;AADQ,KAAjB;AAIA,WAAQ,aAAYnB,GAAG,CAACE,WAAJ,CAAgBqB,QAAhB,CAA0B,IAAGT,WAAY,iBAA7D;AACD;;AAED,SAAQ,aAAYd,GAAG,CAACE,WAAJ,CAAgBD,KAAhB,CAAuB,IAAGa,WAAY,iBAA1D;AACD,CA9CD;;AAgDApB,aAAa,CAAC8B,KAAd,GAAsB,UAAU5B,MAAV,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0C;AAC9D,QAAMC,KAAK,GAAGL,MAAM,CAACC,GAAD,CAApB,CAD8D,CAG9D;AACA;AACA;AACA;;AAEAI,EAAAA,KAAK,CAACmB,KAAN,CAAYnB,KAAK,CAACiB,SAAN,CAAgB,KAAhB,CAAZ,EAAoC,CAApC,IACElB,GAAG,CAACyB,kBAAJ,CAAuBxB,KAAK,CAACyB,QAA7B,EAAuC5B,OAAvC,EAAgDC,GAAhD,CADF;AAGA,SAAOC,GAAG,CAAC2B,WAAJ,CAAgB/B,MAAhB,EAAwBC,GAAxB,EAA6BC,OAA7B,CAAP;AACD,CAZD;;AAcAJ,aAAa,CAACkC,SAAd,GAA0B,UAAUhC,MAAV,EAAkBC,GAAlB,EAAuBC;AAAQ;AAA/B,EAA2C;AACnE,SAAOA,OAAO,CAAC+B,QAAR,GAAmB,UAAnB,GAAgC,QAAvC;AACD,CAFD;;AAGAnC,aAAa,CAACoC,SAAd,GAA0B,UAAUlC,MAAV,EAAkBC,GAAlB,EAAuBC;AAAQ;AAA/B,EAA2C;AACnE,SAAOA,OAAO,CAACiC,MAAR,GAAkBjC,OAAO,CAAC+B,QAAR,GAAmB,UAAnB,GAAgC,QAAlD,GAA8D,IAArE;AACD,CAFD;;AAIAnC,aAAa,CAACsC,IAAd,GAAqB,UAAUpC,MAAV,EAAkBC;AAAI;AAAtB,EAA2C;AAC9D,SAAOJ,UAAU,CAACG,MAAM,CAACC,GAAD,CAAN,CAAYM,OAAb,CAAjB;AACD,CAFD;;AAIAT,aAAa,CAACuC,UAAd,GAA2B,UAAUrC,MAAV,EAAkBC;AAAI;AAAtB,EAA2C;AACpE,SAAOD,MAAM,CAACC,GAAD,CAAN,CAAYM,OAAnB;AACD,CAFD;;AAGAT,aAAa,CAACwC,WAAd,GAA4B,UAAUtC,MAAV,EAAkBC;AAAI;AAAtB,EAA2C;AACrE,SAAOD,MAAM,CAACC,GAAD,CAAN,CAAYM,OAAnB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,QAAT,GAAqB;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,OAAKC,KAAL,GAAa7C,MAAM,CAAC,EAAD,EAAKG,aAAL,CAAnB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAyC,QAAQ,CAACE,SAAT,CAAmBnC,WAAnB,GAAiC,SAASA,WAAT,CAAsBD,KAAtB,EAA6B;AAC5D,MAAIgB,CAAJ,EAAOqB,CAAP,EAAUC,MAAV;;AAEA,MAAI,CAACtC,KAAK,CAACmB,KAAX,EAAkB;AAAE,WAAO,EAAP;AAAW;;AAE/BmB,EAAAA,MAAM,GAAG,EAAT;;AAEA,OAAKtB,CAAC,GAAG,CAAJ,EAAOqB,CAAC,GAAGrC,KAAK,CAACmB,KAAN,CAAYoB,MAA5B,EAAoCvB,CAAC,GAAGqB,CAAxC,EAA2CrB,CAAC,EAA5C,EAAgD;AAC9CsB,IAAAA,MAAM,IAAI,MAAM9C,UAAU,CAACQ,KAAK,CAACmB,KAAN,CAAYH,CAAZ,EAAe,CAAf,CAAD,CAAhB,GAAsC,IAAtC,GAA6CxB,UAAU,CAACQ,KAAK,CAACmB,KAAN,CAAYH,CAAZ,EAAe,CAAf,CAAD,CAAvD,GAA6E,GAAvF;AACD;;AAED,SAAOsB,MAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACE,SAAT,CAAmBV,WAAnB,GAAiC,SAASA,WAAT,CAAsB/B,MAAtB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;AAC3E,QAAMG,KAAK,GAAGL,MAAM,CAACC,GAAD,CAApB;AACA,MAAI0C,MAAM,GAAG,EAAb,CAF2E,CAI3E;;AACA,MAAItC,KAAK,CAACwC,MAAV,EAAkB;AAChB,WAAO,EAAP;AACD,GAP0E,CAS3E;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIxC,KAAK,CAACyC,KAAN,IAAezC,KAAK,CAAC0C,OAAN,KAAkB,CAAC,CAAlC,IAAuC9C,GAAvC,IAA8CD,MAAM,CAACC,GAAG,GAAG,CAAP,CAAN,CAAgB4C,MAAlE,EAA0E;AACxEF,IAAAA,MAAM,IAAI,IAAV;AACD,GAlB0E,CAoB3E;;;AACAA,EAAAA,MAAM,IAAI,CAACtC,KAAK,CAAC0C,OAAN,KAAkB,CAAC,CAAnB,GAAuB,IAAvB,GAA8B,GAA/B,IAAsC1C,KAAK,CAAC2C,GAAtD,CArB2E,CAuB3E;;AACAL,EAAAA,MAAM,IAAI,KAAKrC,WAAL,CAAiBD,KAAjB,CAAV,CAxB2E,CA0B3E;;AACA,MAAIA,KAAK,CAAC0C,OAAN,KAAkB,CAAlB,IAAuB7C,OAAO,CAAC+B,QAAnC,EAA6C;AAC3CU,IAAAA,MAAM,IAAI,IAAV;AACD,GA7B0E,CA+B3E;;;AACA,MAAIM,MAAM,GAAG,KAAb;;AACA,MAAI5C,KAAK,CAACyC,KAAV,EAAiB;AACfG,IAAAA,MAAM,GAAG,IAAT;;AAEA,QAAI5C,KAAK,CAAC0C,OAAN,KAAkB,CAAtB,EAAyB;AACvB,UAAI9C,GAAG,GAAG,CAAN,GAAUD,MAAM,CAAC4C,MAArB,EAA6B;AAC3B,cAAMM,SAAS,GAAGlD,MAAM,CAACC,GAAG,GAAG,CAAP,CAAxB;;AAEA,YAAIiD,SAAS,CAACC,IAAV,KAAmB,QAAnB,IAA+BD,SAAS,CAACL,MAA7C,EAAqD;AACnD;AACA;AACAI,UAAAA,MAAM,GAAG,KAAT;AACD,SAJD,MAIO,IAAIC,SAAS,CAACH,OAAV,KAAsB,CAAC,CAAvB,IAA4BG,SAAS,CAACF,GAAV,KAAkB3C,KAAK,CAAC2C,GAAxD,EAA6D;AAClE;AACA;AACAC,UAAAA,MAAM,GAAG,KAAT;AACD;AACF;AACF;AACF;;AAEDN,EAAAA,MAAM,IAAIM,MAAM,GAAG,KAAH,GAAW,GAA3B;AAEA,SAAON,MAAP;AACD,CAxDD;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACE,SAAT,CAAmBW,YAAnB,GAAkC,UAAUpD,MAAV,EAAkBE,OAAlB,EAA2BC,GAA3B,EAAgC;AAChE,MAAIwC,MAAM,GAAG,EAAb;AACA,QAAMH,KAAK,GAAG,KAAKA,KAAnB;;AAEA,OAAK,IAAInB,CAAC,GAAG,CAAR,EAAWgC,GAAG,GAAGrD,MAAM,CAAC4C,MAA7B,EAAqCvB,CAAC,GAAGgC,GAAzC,EAA8ChC,CAAC,EAA/C,EAAmD;AACjD,UAAM8B,IAAI,GAAGnD,MAAM,CAACqB,CAAD,CAAN,CAAU8B,IAAvB;;AAEA,QAAI,OAAOX,KAAK,CAACW,IAAD,CAAZ,KAAuB,WAA3B,EAAwC;AACtCR,MAAAA,MAAM,IAAIH,KAAK,CAACW,IAAD,CAAL,CAAYnD,MAAZ,EAAoBqB,CAApB,EAAuBnB,OAAvB,EAAgCC,GAAhC,EAAqC,IAArC,CAAV;AACD,KAFD,MAEO;AACLwC,MAAAA,MAAM,IAAI,KAAKZ,WAAL,CAAiB/B,MAAjB,EAAyBqB,CAAzB,EAA4BnB,OAA5B,CAAV;AACD;AACF;;AAED,SAAOyC,MAAP;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACE,SAAT,CAAmBZ,kBAAnB,GAAwC,UAAU7B,MAAV,EAAkBE,OAAlB,EAA2BC,GAA3B,EAAgC;AACtE,MAAIwC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAItB,CAAC,GAAG,CAAR,EAAWgC,GAAG,GAAGrD,MAAM,CAAC4C,MAA7B,EAAqCvB,CAAC,GAAGgC,GAAzC,EAA8ChC,CAAC,EAA/C,EAAmD;AACjD,YAAQrB,MAAM,CAACqB,CAAD,CAAN,CAAU8B,IAAlB;AACE,WAAK,MAAL;AACER,QAAAA,MAAM,IAAI3C,MAAM,CAACqB,CAAD,CAAN,CAAUd,OAApB;AACA;;AACF,WAAK,OAAL;AACEoC,QAAAA,MAAM,IAAI,KAAKd,kBAAL,CAAwB7B,MAAM,CAACqB,CAAD,CAAN,CAAUS,QAAlC,EAA4C5B,OAA5C,EAAqDC,GAArD,CAAV;AACA;;AACF,WAAK,aAAL;AACA,WAAK,YAAL;AACEwC,QAAAA,MAAM,IAAI3C,MAAM,CAACqB,CAAD,CAAN,CAAUd,OAApB;AACA;;AACF,WAAK,WAAL;AACA,WAAK,WAAL;AACEoC,QAAAA,MAAM,IAAI,IAAV;AACA;;AACF,cAfF,CAgBI;;AAhBJ;AAkBD;;AAED,SAAOA,MAAP;AACD,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,QAAQ,CAACE,SAAT,CAAmBa,MAAnB,GAA4B,UAAUtD,MAAV,EAAkBE,OAAlB,EAA2BC,GAA3B,EAAgC;AAC1D,MAAIwC,MAAM,GAAG,EAAb;AACA,QAAMH,KAAK,GAAG,KAAKA,KAAnB;;AAEA,OAAK,IAAInB,CAAC,GAAG,CAAR,EAAWgC,GAAG,GAAGrD,MAAM,CAAC4C,MAA7B,EAAqCvB,CAAC,GAAGgC,GAAzC,EAA8ChC,CAAC,EAA/C,EAAmD;AACjD,UAAM8B,IAAI,GAAGnD,MAAM,CAACqB,CAAD,CAAN,CAAU8B,IAAvB;;AAEA,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACrBR,MAAAA,MAAM,IAAI,KAAKS,YAAL,CAAkBpD,MAAM,CAACqB,CAAD,CAAN,CAAUS,QAA5B,EAAsC5B,OAAtC,EAA+CC,GAA/C,CAAV;AACD,KAFD,MAEO,IAAI,OAAOqC,KAAK,CAACW,IAAD,CAAZ,KAAuB,WAA3B,EAAwC;AAC7CR,MAAAA,MAAM,IAAIH,KAAK,CAACW,IAAD,CAAL,CAAYnD,MAAZ,EAAoBqB,CAApB,EAAuBnB,OAAvB,EAAgCC,GAAhC,EAAqC,IAArC,CAAV;AACD,KAFM,MAEA;AACLwC,MAAAA,MAAM,IAAI,KAAKZ,WAAL,CAAiB/B,MAAjB,EAAyBqB,CAAzB,EAA4BnB,OAA5B,EAAqCC,GAArC,CAAV;AACD;AACF;;AAED,SAAOwC,MAAP;AACD,CAjBD;;AAmBA,eAAeJ,QAAf","sourcesContent":["/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n"]},"metadata":{},"sourceType":"module"}
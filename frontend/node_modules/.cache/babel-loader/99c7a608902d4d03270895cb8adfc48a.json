{"ast":null,"code":"// Proceess '\\n'\nimport { isSpace } from '../common/utils.mjs';\nexport default function newline(state, silent) {\n  let pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A\n  /* \\n */\n  ) {\n      return false;\n    }\n\n  const pmax = state.pending.length - 1;\n  const max = state.posMax; // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1;\n\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++; // skip heading spaces for next line\n\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  state.pos = pos;\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/newline.mjs"],"names":["isSpace","newline","state","silent","pos","src","charCodeAt","pmax","pending","length","max","posMax","ws","slice","push"],"mappings":"AAAA;AAEA,SAASA,OAAT,QAAwB,qBAAxB;AAEA,eAAe,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAC9C,MAAIC,GAAG,GAAGF,KAAK,CAACE,GAAhB;;AAEA,MAAIF,KAAK,CAACG,GAAN,CAAUC,UAAV,CAAqBF,GAArB,MAA8B;AAAI;AAAtC,IAAgD;AAAE,aAAO,KAAP;AAAc;;AAEhE,QAAMG,IAAI,GAAGL,KAAK,CAACM,OAAN,CAAcC,MAAd,GAAuB,CAApC;AACA,QAAMC,GAAG,GAAGR,KAAK,CAACS,MAAlB,CAN8C,CAQ9C;AACA;AACA;AACA;;AACA,MAAI,CAACR,MAAL,EAAa;AACX,QAAII,IAAI,IAAI,CAAR,IAAaL,KAAK,CAACM,OAAN,CAAcF,UAAd,CAAyBC,IAAzB,MAAmC,IAApD,EAA0D;AACxD,UAAIA,IAAI,IAAI,CAAR,IAAaL,KAAK,CAACM,OAAN,CAAcF,UAAd,CAAyBC,IAAI,GAAG,CAAhC,MAAuC,IAAxD,EAA8D;AAC5D;AACA,YAAIK,EAAE,GAAGL,IAAI,GAAG,CAAhB;;AACA,eAAOK,EAAE,IAAI,CAAN,IAAWV,KAAK,CAACM,OAAN,CAAcF,UAAd,CAAyBM,EAAE,GAAG,CAA9B,MAAqC,IAAvD,EAA6DA,EAAE;;AAE/DV,QAAAA,KAAK,CAACM,OAAN,GAAgBN,KAAK,CAACM,OAAN,CAAcK,KAAd,CAAoB,CAApB,EAAuBD,EAAvB,CAAhB;AACAV,QAAAA,KAAK,CAACY,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;AACD,OAPD,MAOO;AACLZ,QAAAA,KAAK,CAACM,OAAN,GAAgBN,KAAK,CAACM,OAAN,CAAcK,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAhB;AACAX,QAAAA,KAAK,CAACY,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;AACD;AACF,KAZD,MAYO;AACLZ,MAAAA,KAAK,CAACY,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;AACD;AACF;;AAEDV,EAAAA,GAAG,GA9B2C,CAgC9C;;AACA,SAAOA,GAAG,GAAGM,GAAN,IAAaV,OAAO,CAACE,KAAK,CAACG,GAAN,CAAUC,UAAV,CAAqBF,GAArB,CAAD,CAA3B,EAAwD;AAAEA,IAAAA,GAAG;AAAI;;AAEjEF,EAAAA,KAAK,CAACE,GAAN,GAAYA,GAAZ;AACA,SAAO,IAAP;AACD","sourcesContent":["// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}
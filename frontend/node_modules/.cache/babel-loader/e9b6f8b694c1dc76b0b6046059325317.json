{"ast":null,"code":"// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n/* eslint-disable-next-line no-control-regex */\n\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/;\nexport default function autolink(state, silent) {\n  let pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C\n  /* < */\n  ) {\n      return false;\n    }\n\n  const start = state.pos;\n  const max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n    const ch = state.src.charCodeAt(pos);\n    if (ch === 0x3C\n    /* < */\n    ) return false;\n    if (ch === 0x3E\n    /* > */\n    ) break;\n  }\n\n  const url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url);\n\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url);\n\n    if (!state.md.validateLink(fullUrl)) {\n      return false;\n    }\n\n    if (!silent) {\n      const token_o = state.push('link_open', 'a', 1);\n      token_o.attrs = [['href', fullUrl]];\n      token_o.markup = 'autolink';\n      token_o.info = 'auto';\n      const token_t = state.push('text', '', 0);\n      token_t.content = state.md.normalizeLinkText(url);\n      const token_c = state.push('link_close', 'a', -1);\n      token_c.markup = 'autolink';\n      token_c.info = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_inline/autolink.mjs"],"names":["EMAIL_RE","AUTOLINK_RE","autolink","state","silent","pos","src","charCodeAt","start","max","posMax","ch","url","slice","test","fullUrl","md","normalizeLink","validateLink","token_o","push","attrs","markup","info","token_t","content","normalizeLinkText","token_c","length"],"mappings":"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","sourcesContent":["// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}
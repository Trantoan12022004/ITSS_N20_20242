{"ast":null,"code":"// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/; // Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\n\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  let inside_autolink = 0;\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  let inside_autolink = 0;\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content.replace(/\\+-/g, '±') // .., ..., ....... -> …\n        // but ?..... & !..... -> ?.. & !..\n        .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',') // em-dash\n        .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014') // en-dash\n        .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013').replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nexport default function replace(state) {\n  let blkIdx;\n\n  if (!state.md.options.typographer) {\n    return;\n  }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') {\n      continue;\n    }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_core/replacements.mjs"],"names":["RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","c","r","tm","replaceFn","match","name","toLowerCase","replace_scoped","inlineTokens","inside_autolink","i","length","token","type","content","replace","info","replace_rare","test","state","blkIdx","md","options","typographer","tokens","children"],"mappings":"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","sourcesContent":["// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
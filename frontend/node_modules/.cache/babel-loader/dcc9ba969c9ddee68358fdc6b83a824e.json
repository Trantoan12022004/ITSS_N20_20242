{"ast":null,"code":"// Code block (4 spaces padded)\nexport default function code(state, startLine, endLine\n/*, silent */\n) {\n  if (state.sCount[startLine] - state.blkIndent < 4) {\n    return false;\n  }\n\n  let nextLine = startLine + 1;\n  let last = nextLine;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n\n    break;\n  }\n\n  state.line = last;\n  const token = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map = [startLine, state.line];\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Trant/Documents/Lập Trình Web/5.font-end-react-fullstack/React - Copy/node_modules/markdown-it/lib/rules_block/code.mjs"],"names":["code","state","startLine","endLine","sCount","blkIndent","nextLine","last","isEmpty","line","token","push","content","getLines","map"],"mappings":"AAAA;AAEA,eAAe,SAASA,IAAT,CAAeC,KAAf,EAAsBC,SAAtB,EAAiCC;AAAO;AAAxC,EAAuD;AACpE,MAAIF,KAAK,CAACG,MAAN,CAAaF,SAAb,IAA0BD,KAAK,CAACI,SAAhC,GAA4C,CAAhD,EAAmD;AAAE,WAAO,KAAP;AAAc;;AAEnE,MAAIC,QAAQ,GAAGJ,SAAS,GAAG,CAA3B;AACA,MAAIK,IAAI,GAAGD,QAAX;;AAEA,SAAOA,QAAQ,GAAGH,OAAlB,EAA2B;AACzB,QAAIF,KAAK,CAACO,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3BA,MAAAA,QAAQ;AACR;AACD;;AAED,QAAIL,KAAK,CAACG,MAAN,CAAaE,QAAb,IAAyBL,KAAK,CAACI,SAA/B,IAA4C,CAAhD,EAAmD;AACjDC,MAAAA,QAAQ;AACRC,MAAAA,IAAI,GAAGD,QAAP;AACA;AACD;;AACD;AACD;;AAEDL,EAAAA,KAAK,CAACQ,IAAN,GAAaF,IAAb;AAEA,QAAMG,KAAK,GAAKT,KAAK,CAACU,IAAN,CAAW,YAAX,EAAyB,MAAzB,EAAiC,CAAjC,CAAhB;AACAD,EAAAA,KAAK,CAACE,OAAN,GAAgBX,KAAK,CAACY,QAAN,CAAeX,SAAf,EAA0BK,IAA1B,EAAgC,IAAIN,KAAK,CAACI,SAA1C,EAAqD,KAArD,IAA8D,IAA9E;AACAK,EAAAA,KAAK,CAACI,GAAN,GAAgB,CAACZ,SAAD,EAAYD,KAAK,CAACQ,IAAlB,CAAhB;AAEA,SAAO,IAAP;AACD","sourcesContent":["// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}